exports.id=177,exports.ids=[177],exports.modules={2384:(t,e,i)=>{i.d(e,{HomeWebviewProvider:()=>HomeWebviewProvider});var s=i(9496),o=i(8388),n=i(4209),a=i(9529),r=i(5148),h=i(9796),c=i(5798),d=(t=>(t.DismissedWelcome="dismissed:welcome",t.OpenedSCM="opened:scm",t))(d||{});const g=new c.ke("home/step/complete"),l=new c.ke("home/section/dismiss"),u=new c.ke("home/status/dismiss"),m=new c.ke("home/banner/dismiss"),p=new c.jH("subscription/didChange"),b=new c.jH("repositories/didChange"),y=new c.jH("configuration/didChange"),w=new c.jH("layout/didChange");class HomeWebviewProvider{constructor(t,e){this.container=t,this.host=e,this._validateSubscriptionDebounced=void 0,this._disposable=s.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),r.D.onDidChange(this.onConfigurationChanged,this),this.container.storage.onDidChange(this.onStorageChanged,this))}dispose(){this._disposable.dispose()}onConfigurationChanged(t){r.D.changed(t,"plusFeatures.enabled")&&this.notifyDidChangeConfiguration()}onRepositoriesChanged(){this.notifyDidChangeRepositories()}onStorageChanged(t){"views:layout"===t.key&&this.notifyDidChangeLayout()}async onSubscriptionChanged(t){await this.container.storage.store("home:status:pinned",!0),this.notifyDidChangeData(t.current)}onVisibilityChanged(t){t?queueMicrotask((()=>{this.validateSubscription()})):this._validateSubscriptionDebounced?.cancel()}onWindowFocusChanged(t){t&&this.host.visible?queueMicrotask((()=>{this.validateSubscription()})):this._validateSubscriptionDebounced?.cancel()}registerCommands(){return[(0,a.xR)(`${this.host.id}.refresh`,(()=>this.host.refresh(!0)),this),(0,a.xR)("gitlens.home.toggleWelcome",(async()=>{const t=!this.welcomeVisible;await this.container.storage.store("views:welcome:visible",t),t&&await Promise.allSettled([this.container.storage.store("home:actions:completed",[]),this.container.storage.store("home:steps:completed",[]),this.container.storage.store("home:sections:dismissed",[])]),this.host.refresh()})),(0,a.xR)("gitlens.home.restoreWelcome",(async()=>{await Promise.allSettled([this.container.storage.store("home:steps:completed",[]),this.container.storage.store("home:sections:dismissed",[])]),this.host.refresh()})),(0,a.xR)("gitlens.home.showSCM",(async()=>{const t=this.container.storage.get("home:actions:completed",[]);t.includes(d.OpenedSCM)||(t.push(d.OpenedSCM),await this.container.storage.store("home:actions:completed",t),this.notifyDidChangeData()),await(0,a.dO)("workbench.view.scm")}))]}onMessageReceived(t){switch(t.method){case g.method:(0,c.mq)(g,t,(t=>this.completeStep(t)));break;case l.method:(0,c.mq)(l,t,(t=>this.dismissSection(t)));break;case u.method:(0,c.mq)(u,t,(t=>this.dismissPinStatus()));break;case m.method:(0,c.mq)(m,t,(t=>this.dismissBanner(t)))}}async completeStep({id:t,completed:e=!1}){const i=this.container.storage.get("home:steps:completed",[]),s=i.includes(t);!s&&e?i.push(t):s&&!e&&i.splice(i.indexOf(t),1),await this.container.storage.store("home:steps:completed",i),this.notifyDidChangeData()}async dismissSection(t){const e=this.container.storage.get("home:sections:dismissed",[]);e.includes(t.id)||(e.push(t.id),await this.container.storage.store("home:sections:dismissed",e),this.notifyDidChangeData())}async dismissBanner(t){const e=this.container.storage.get("home:banners:dismissed",[]);e.includes(t.id)||e.push(t.id),await this.container.storage.store("home:banners:dismissed",e),this.notifyDidChangeData()}async dismissPinStatus(){await this.container.storage.store("home:status:pinned",!1),this.notifyDidChangeData()}includeBootstrap(){return this.getState()}get welcomeVisible(){return this.container.storage.get("views:welcome:visible",!0)}async getRepoVisibility(){return await this.container.git.visibility()}async getSubscription(t){const e=[...this.container.storage.get("home:actions:completed",[])];this.welcomeVisible||e.push(d.DismissedWelcome);const i=t??await this.container.subscription.getSubscription(!0);let s;return s=i.account?.email?(0,o.GV)(i.account.email,34).toString():`${this.host.getWebRoot()??""}/media/gitlens-logo.webp`,{subscription:i,completedActions:e,avatar:s}}getPinStatus(){return this.container.storage.get("home:status:pinned")??!0}async getState(t){const e=await this.getSubscription(t),i=this.container.storage.get("home:steps:completed",[]),s=this.container.storage.get("home:sections:dismissed",[]),o=this.container.storage.get("home:banners:dismissed",[]);return{repositories:this.getRepositoriesState(),webroot:this.host.getWebRoot(),subscription:e.subscription,completedActions:e.completedActions,plusEnabled:this.getPlusEnabled(),visibility:await this.getRepoVisibility(),completedSteps:i,dismissedSections:s,avatar:e.avatar,layout:this.getLayout(),pinStatus:this.getPinStatus(),dismissedBanners:o}}notifyDidChangeData(t){return!!this.host.ready&&s.window.withProgress({location:{viewId:this.host.id}},(async()=>{const e=await this.getSubscription(t);return this.host.notify(p,{...e,pinStatus:this.getPinStatus()})}))}getRepositoriesState(){return{count:this.container.git.repositoryCount,openCount:this.container.git.openRepositoryCount,hasUnsafe:this.container.git.hasUnsafeRepositories()}}notifyDidChangeRepositories(){this.host.ready&&this.host.notify(b,this.getRepositoriesState())}getPlusEnabled(){return r.D.get("plusFeatures.enabled")}notifyDidChangeConfiguration(){this.host.ready&&this.host.notify(y,{plusEnabled:this.getPlusEnabled()})}getLayout(){const t=this.container.storage.get("views:layout");return null!=t?t:n.x.SourceControl}notifyDidChangeLayout(){this.host.ready&&this.host.notify(w,{layout:this.getLayout()})}async validateSubscription(){null==this._validateSubscriptionDebounced&&(this._validateSubscriptionDebounced=(0,h.Ds)(this.validateSubscriptionCore,1e3)),await this._validateSubscriptionDebounced()}async validateSubscriptionCore(){if(null==this._validating){this._validating=this.container.subscription.validate();try{await this._validating}finally{this._validating=void 0}}}}}};