exports.id=831,exports.ids=[831],exports.modules={9042:(t,e,i)=>{i.d(e,{TimelineWebviewProvider:()=>TimelineWebviewProvider});var o=i(9496),n=i(5255),s=i(8887),a=i(7462),r=i(6450),h=i(3646),d=i(9529),c=i(5148),p=i(7512),g=i(4241),l=i(9796),u=i(3105),m=i(2509),f=i(6922),v=i(5798),w=i(6260);const y=new v.jH("timeline/didChange"),C=new v.ke("timeline/point/open"),b=new v.ke("timeline/period/update");var x=Object.defineProperty,S=Object.getOwnPropertyDescriptor,D=(t,e,i,o)=>{for(var n,s=o>1?void 0:o?S(e,i):e,a=t.length-1;a>=0;a--)(n=t[a])&&(s=(o?n(e,i,s):n(s))||s);return o&&s&&x(e,i,s),s};class TimelineWebviewProvider{constructor(t,e){this.container=t,this.host=e,this._bootstraping=!0,this._notifyDidChangeStateDebounced=void 0,this._context={uri:void 0,period:"3|M",etagRepositories:this.container.git.etag,etagRepository:0,etagSubscription:this.container.subscription.etag},this.updatePendingEditor(o.window.activeTextEditor),this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.host.isEditor()?this._disposable=o.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this)):this._disposable=o.Disposable.from(this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepository(this.onRepositoryChanged,this),this.container.git.onDidChangeRepositories(this.onRepositoriesChanged,this),o.window.onDidChangeActiveTextEditor((0,l.Ds)(this.onActiveEditorChanged,250),this),this.container.events.on("file:selected",(0,l.Ds)(this.onFileSelected,250),this))}dispose(){this._disposable.dispose()}onShowing(t,e,...i){const[n]=i;return null!=n?n instanceof o.Uri?this.updatePendingUri(n):(0,f.w8)(n)&&this.updatePendingUri(n.uri):this.updatePendingEditor(o.window.activeTextEditor),t?(this._context={...this._context,...this._pendingContext},this._pendingContext=void 0):this.updateState(),!0}includeBootstrap(){return this._bootstraping=!0,this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.getState(this._context)}registerCommands(){return this.host.isEditor()?[(0,d.xR)(n.Gh.RefreshTimelinePage,(()=>this.host.refresh(!0)))]:[(0,d.xR)(`${this.host.id}.refresh`,(()=>this.host.refresh(!0)),this),(0,d.xR)(`${this.host.id}.openInTab`,(()=>this.openInTab()),this)]}onVisibilityChanged(t){t&&(this._bootstraping&&(this._bootstraping=!1,null==this._pendingContext||!("uri"in this._pendingContext))||this.updateState())}onMessageReceived(t){switch(t.method){case C.method:(0,v.mq)(C,t,(async t=>{if(null==t.data||!t.data.selected||null==this._context.uri)return;const e=this.container.git.getRepository(this._context.uri);if(null==e)return;const i=await e.getCommit(t.data.id);null!=i&&(this.container.events.fire("commit:selected",{commit:i,interaction:"active",preserveFocus:!0,preserveVisibility:!1},{source:this.host.id}),this.container.commitDetailsView.ready||this.container.commitDetailsView.show({preserveFocus:!0},{commit:i,interaction:"active",preserveVisibility:!1}))}));break;case b.method:(0,v.mq)(b,t,(t=>{this.updatePendingContext({period:t.period})&&this.updateState(!0)}))}}onActiveEditorChanged(t){if(null!=t){if(!(0,m.PH)(t))return;this.container.git.isTrackable(t.document.uri)||(t=void 0)}this.updatePendingEditor(t)&&this.updateState()}onFileSelected(t){if(null==t.data)return;let e=t.data.uri;null!=e&&(this.container.git.isTrackable(e)||(e=void 0)),this.updatePendingUri(e)&&this.updateState()}onRepositoriesChanged(t){const e=this.updatePendingUri(this._context.uri);(this.updatePendingContext({etagRepositories:t.etag})||e)&&this.updateState()}onRepositoryChanged(t){t.changed(h.I6.Heads,h.I6.Index,h.du.Any)&&this.updatePendingContext({etagRepository:t.repository.etag})&&this.updateState()}onSubscriptionChanged(t){this.updatePendingContext({etagSubscription:t.etag})&&this.updateState()}async getState(t){const e=c.D.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",i=c.D.get("defaultDateShortFormat")??"short",n=t.period??"3|M";if(null==t.uri){return{emptyMessage:"There are no editors open that can provide file history information",period:n,title:"",dateFormat:e,shortDateFormat:i,access:await this.container.git.access(s.x.Timeline)}}const h=await a.YY.fromUri(t.uri),d=h.repoPath,p=await this.container.git.access(s.x.Timeline,d);if(!1===p.allowed){const t=function(){const t=[],e=["Eric Amodio","Justin Roberts","Ada Lovelace","Grace Hopper"],i=10;for(let o=0;o<i;o++){const n=new Date((new Date).getTime()-Math.floor(7776e6*Math.random()));t.push({commit:String(o),author:e[Math.floor(Math.random()*e.length)],date:n.toISOString(),message:"",additions:0===o?2:o===i-1?50:Math.floor(20*Math.random())+1,deletions:0===o?1:o===i-1?25:Math.floor(20*Math.random())+1,sort:n.getTime()})}return t}();return{dataset:t.sort(((t,e)=>e.sort-t.sort)),period:n,title:"src/app/index.ts",uri:o.Uri.file("src/app/index.ts").toString(),dateFormat:e,shortDateFormat:i,access:p}}const g=h.relativePath;this.host.isEditor()?this.host.title=`${this.host.originalTitle}: ${h.fileName}`:this.host.description=h.fileName;const[l,m]=await Promise.all([this.container.git.getCurrentUser(d),this.container.git.getLogForFile(d,h.fsPath,{limit:0,ref:h.sha,since:_(n).toISOString()})]);if(null==m)return{dataset:[],emptyMessage:"No commits found for the specified time period",period:n,title:g,sha:h.shortSha,uri:t.uri.toString(),dateFormat:e,shortDateFormat:i,access:p};let f=[...(0,u.hX)(m.commits.values(),(t=>null==t.file?.stats&&1!==(0,r.By)(t.stats?.changedFiles)))];if(0!==f.length){const e=c.D.get("visualHistory.queryLimit")??20,i=this.container.git.getRepository(t.uri),n=i?.provider.name;f.length>e&&(o.window.showWarningMessage(`Unable able to show more than the first ${e} commits for the specified time period because of ${n?`${n} `:""}rate limits.`),f=f.slice(0,20)),await Promise.allSettled(f.map((t=>t.ensureFullDetails())))}const v=l?.name?`${l.name} (you)`:"You",w=[];for(const t of m.commits.values()){const e=t.file?.stats??(1===(0,r.By)(t.stats?.changedFiles)?t.stats:void 0);w.push({author:"You"===t.author.name?v:t.author.name,additions:e?.additions,deletions:e?.deletions,commit:t.sha,date:t.date.toISOString(),message:t.message??t.summary,sort:t.date.getTime()})}return w.sort(((t,e)=>e.sort-t.sort)),{dataset:w,period:n,title:g,sha:h.shortSha,uri:t.uri.toString(),dateFormat:e,shortDateFormat:i,access:p}}updatePendingContext(t){const[e,i]=(0,w.OY)(this._context,this._pendingContext,t);return e&&(this._pendingContext=i),e}updatePendingEditor(t){return(null!=t||!(0,m.JM)())&&(!(null!=t&&!(0,m.PH)(t))&&this.updatePendingUri(t?.document.uri))}updatePendingUri(t){let e;if(null!=t){const i=this.container.git.getRepository(t);e=i?.etag??0}else e=0;return this.updatePendingContext({uri:t,etagRepository:e})}updateState(t=!1){this.host.ready&&this.host.visible&&(null==this._pendingContext&&this.host.isView()&&this.updatePendingEditor(o.window.activeTextEditor),t?this.notifyDidChangeState():(null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,l.Ds)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced()))}async notifyDidChangeState(){if(!this.host.ready||!this.host.visible)return!1;if(this._notifyDidChangeStateDebounced?.cancel(),null==this._pendingContext)return!1;const t={...this._context,...this._pendingContext};return o.window.withProgress({location:{viewId:this.host.id}},(async()=>{await this.host.notify(y,{state:await this.getState(t)})&&(this._context=t,this._pendingContext=void 0)}))}openInTab(){const t=this._context.uri;null!=t&&o.commands.executeCommand(n.Gh.ShowTimelinePage,t)}}function _(t){const[e,i]=t.split("|");switch(i){case"D":return(0,p.IH)(new Date,{days:-parseInt(e,10)});case"M":return(0,p.IH)(new Date,{months:-parseInt(e,10)});case"Y":return(0,p.IH)(new Date,{years:-parseInt(e,10)});default:return(0,p.IH)(new Date,{months:-3})}}D([(0,g.fF)({args:!1})],TimelineWebviewProvider.prototype,"onActiveEditorChanged",1),D([(0,g.fF)({args:!1})],TimelineWebviewProvider.prototype,"onFileSelected",1),D([(0,g.fF)({args:!1})],TimelineWebviewProvider.prototype,"onRepositoriesChanged",1),D([(0,g.fF)({args:!1})],TimelineWebviewProvider.prototype,"onRepositoryChanged",1),D([(0,g.fF)({args:!1})],TimelineWebviewProvider.prototype,"onSubscriptionChanged",1),D([(0,g.fF)({args:!1})],TimelineWebviewProvider.prototype,"getState",1),D([(0,g.fF)()],TimelineWebviewProvider.prototype,"updateState",1),D([(0,g.fF)()],TimelineWebviewProvider.prototype,"notifyDidChangeState",1)}};