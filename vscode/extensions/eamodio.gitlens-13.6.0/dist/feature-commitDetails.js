exports.id=10,exports.ids=[10],exports.modules={9206:(t,e,i)=>{i.d(e,{CommitDetailsWebviewProvider:()=>CommitDetailsWebviewProvider});var s=i(9496),n=i(3139),o=i(5255),a=i(9311),r=i(6897),c=i(9338),h=i(6450),l=i(7881),m=i(8452),d=i(4092),p=i(4321),u=i(9529),g=i(5148),f=i(2061),k=i(4241),v=i(9796),_=i(3105),w=i(4336),S=i(6004);class MRU{constructor(t=10,e){this.maxSize=t,this.comparator=e,this.stack=[],this._position=0}get count(){return this.stack.length}get position(){return this._position}add(t){this._position>0&&(this.stack.splice(0,this._position),this._position=0);const e=null!=this.comparator?this.stack.findIndex((e=>this.comparator(t,e))):this.stack.indexOf(t);-1!==e?this.stack.splice(e,1):this.stack.length===this.maxSize&&this.stack.pop(),this.stack.unshift(t),this._position=0}get(t){if(null!=t){if(t<0||t>=this.stack.length)return;return this.stack[t]}return this.stack.length>0?this.stack[0]:void 0}insert(t){this._position>0&&(this.stack.splice(0,this._position),this._position=0),this.stack.unshift(t),this._position++}navigate(t){if(!(this.stack.length<=1)){if("back"===t){if(this._position>=this.stack.length-1)return;this._position+=1}else{if(this._position<=0)return;this._position-=1}return this.stack[this._position]}}}var D=i(7469);var C=i(5798),x=i(6260);const b=new C.ke("commit/actions"),P=new C.ke("commit/file/actions"),y=new C.ke("commit/file/open"),F=new C.ke("commit/file/openOnRemote"),T=new C.ke("commit/file/compareWorking"),R=new C.ke("commit/file/comparePrevious"),q=new C.ke("commit/pickCommit"),A=new C.ke("commit/searchCommit"),E=new C.ke("commit/autolinkSettings"),M=new C.ke("commit/explain"),O=new C.ke("commit/pin"),W=new C.ke("commit/navigate"),L=new C.ke("commit/preferences"),I=new C.jH("commit/didChange",!0),G=(new C.jH("commit/didChange/rich"),new C.jH("commit/didExplain"));var U=Object.defineProperty,j=Object.getOwnPropertyDescriptor,Y=(t,e,i,s)=>{for(var n,o=s>1?void 0:s?j(e,i):e,a=t.length-1;a>=0;a--)(n=t[a])&&(o=(s?n(e,i,o):n(o))||o);return s&&o&&U(e,i,o),o};class CommitDetailsWebviewProvider{constructor(t,e,i){this.container=t,this.host=e,this.options=i,this._bootstraping=!0,this._pinned=!1,this._focused=!1,this._commitStack=new MRU(10,((t,e)=>t.ref===e.ref)),this._cancellationTokenSource=void 0,this._notifyDidChangeStateDebounced=void 0;let s=this.container.storage.get("views:commitDetails:dismissed");"graph"===i.mode&&null==s&&(s=["sidebar"]),this._context={pinned:!1,commit:void 0,preferences:{autolinksExpanded:this.container.storage.getWorkspace("views:commitDetails:autolinksExpanded"),avatars:g.D.get("views.commitDetails.avatars"),dismissed:s,files:g.D.get("views.commitDetails.files")},richStateLoaded:!1,formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0,dateFormat:g.D.get("defaultDateFormat")??"MMMM Do, YYYY h:mma",indentGuides:g.D.getAny("workbench.tree.renderIndentGuides")??"onHover",navigationStack:{count:0,position:0},visible:!1},this._disposable=g.D.onDidChangeAny(this.onAnyConfigurationChanged,this)}dispose(){this._disposable.dispose()}async onShowing(t,e,...i){let s,n=i[0];return"object"!=typeof n&&(n=void 0),null!=n&&(n.preserveFocus&&(e.preserveFocus=!0),({commit:s,...n}=n)),null==s&&(this._pinned||(s=this.getBestCommitOrStash())),null==s||this._context.commit?.ref.startsWith(s.ref)||await this.updateCommit(s,{pinned:!1}),!(n?.preserveVisibility&&!this.host.visible)}onCommitSelected(t){null==t.data||"graph"===this.options.mode&&"gitlens.views.graph"!==t.source||"default"===this.options.mode&&"gitlens.views.graph"===t.source||(this._pinned&&"passive"===t.data.interaction?(this._commitStack.insert((0,p.qj)(t.data.commit)),this.updateNavigation()):this.host.show(!1,{preserveFocus:t.data.preserveFocus},t.data))}includeBootstrap(){return this._bootstraping=!0,this._context={...this._context,...this._pendingContext},this._pendingContext=void 0,this.getState(this._context)}onFocusChanged(t){this._focused!==t&&(this._focused=t,t&&this.isLineTrackerSuspended&&this.ensureTrackers())}onVisibilityChanged(t){this.ensureTrackers(),this.updatePendingContext({visible:t}),t&&(this._bootstraping&&(this._bootstraping=!1,null==this._pendingContext)||(this.onRefresh(),this.updateState(!0)))}onAnyConfigurationChanged(t){g.D.changed(t,"defaultDateFormat")&&(this.updatePendingContext({dateFormat:g.D.get("defaultDateFormat")??"MMMM Do, YYYY h:mma"}),this.updateState()),g.D.changed(t,"views.commitDetails")&&((g.D.changed(t,"views.commitDetails.files")||g.D.changed(t,"views.commitDetails.avatars"))&&this.updatePendingContext({preferences:{...this._context.preferences,...this._pendingContext?.preferences,avatars:g.D.get("views.commitDetails.avatars"),files:g.D.get("views.commitDetails.files")}}),null!=this._context.commit&&(g.D.changed(t,"views.commitDetails.autolinks")||g.D.changed(t,"views.commitDetails.pullRequests"))&&this.updateCommit(this._context.commit,{force:!0}),this.updateState()),g.D.changedAny(t,"workbench.tree.renderIndentGuides")&&(this.updatePendingContext({indentGuides:g.D.getAny("workbench.tree.renderIndentGuides")??"onHover"}),this.updateState())}ensureTrackers(){if(this._commitTrackerDisposable?.dispose(),this._commitTrackerDisposable=void 0,this._lineTrackerDisposable?.dispose(),this._lineTrackerDisposable=void 0,this.host.visible&&(this._commitTrackerDisposable=this.container.events.on("commit:selected",this.onCommitSelected,this),!this._pinned&&"graph"!==this.options.mode)){const{lineTracker:t}=this.container;this._lineTrackerDisposable=t.subscribe(this,t.onDidChangeActiveLines(this.onActiveEditorLinesChanged,this))}}get isLineTrackerSuspended(){return"graph"!==this.options.mode&&null==this._lineTrackerDisposable}suspendLineTracker(){setTimeout((()=>{this._lineTrackerDisposable?.dispose(),this._lineTrackerDisposable=void 0}),100)}onRefresh(t){if(this._pinned)return;const e=this._pendingContext?.commit??this.getBestCommitOrStash();this.updateCommit(e,{immediate:!1})}onMessageReceived(t){switch(t.method){case F.method:(0,C.mq)(F,t,(t=>{this.openFileOnRemote(t)}));break;case y.method:(0,C.mq)(y,t,(t=>{this.openFile(t)}));break;case T.method:(0,C.mq)(T,t,(t=>{this.openFileComparisonWithWorking(t)}));break;case R.method:(0,C.mq)(R,t,(t=>{this.openFileComparisonWithPrevious(t)}));break;case P.method:(0,C.mq)(P,t,(t=>{this.showFileActions(t)}));break;case b.method:(0,C.mq)(b,t,(t=>{switch(t.action){case"graph":if(null==this._context.commit)return;(0,u.P0)(o.Gh.ShowInCommitGraph,{ref:(0,p.qj)(this._context.commit)});break;case"more":this.showCommitActions();break;case"scm":(0,u.dO)("workbench.view.scm");break;case"sha":t.alt?this.showCommitPicker():null!=this._context.commit&&(0,u.P0)(o.Gh.CopyShaToClipboard,{sha:this._context.commit.sha})}}));break;case q.method:(0,C.mq)(q,t,(t=>this.showCommitPicker()));break;case A.method:(0,C.mq)(A,t,(t=>this.showCommitSearch()));break;case E.method:(0,C.mq)(E,t,(t=>this.showAutolinkSettings()));break;case O.method:(0,C.mq)(O,t,(t=>this.updatePinned(t.pin??!1,!0)));break;case W.method:(0,C.mq)(W,t,(t=>this.navigateStack(t.direction)));break;case L.method:(0,C.mq)(L,t,(t=>this.updatePreferences(t)));break;case M.method:(0,C.mq)(M,t,(()=>this.explainCommit(t.completionId)))}}async explainCommit(t){let e;try{e={summary:await this.container.ai.explainCommit(this._context.commit,{progress:{location:{viewId:this.host.id}}})}}catch(t){e={error:{message:t.message}}}this.host.notify(G,e,t)}navigateStack(t){const e=this._commitStack.navigate(t);null!=e&&this.updateCommit(e,{immediate:!0,skipStack:!0})}onActiveEditorLinesChanged(t){if(t.pending||null==t.editor)return;const e=t.selections?.[0]?.active,i=null!=e?this.container.lineTracker.getState(e)?.commit:void 0;this.updateCommit(i)}async getState(t){let e;if(null!=this._cancellationTokenSource&&(this._cancellationTokenSource.cancel(),this._cancellationTokenSource.dispose(),this._cancellationTokenSource=void 0),null!=t.commit&&(e=await this.getDetailsModel(t.commit,t.formattedMessage),!t.richStateLoaded)){this._cancellationTokenSource=new s.CancellationTokenSource;const e=this._cancellationTokenSource.token;setTimeout((()=>{e.isCancellationRequested||this.updateRichState(t,e)}),100)}return function(t){try{let e=function(t,e){if(e instanceof Date)return e.getTime();if(e instanceof Map||e instanceof Set)return[...e.entries()];if(e instanceof Function||e instanceof Error)return;if(e instanceof RegExp)return e.toString();const i=this[t];return i instanceof Date?i.getTime():e};return JSON.parse(JSON.stringify(t,e))}catch(t){throw t}}({pinned:t.pinned,includeRichContent:t.richStateLoaded,preferences:t.preferences,selected:e,autolinkedIssues:t.autolinkedIssues?.map(m.Gj),pullRequest:null!=t.pullRequest?(0,d.l1)(t.pullRequest):void 0,dateFormat:t.dateFormat,indentGuides:t.indentGuides,navigationStack:t.navigationStack})}async updateRichState(t,e){const{commit:i}=t;if(null==i)return;const s=await this.container.git.getBestRemoteWithRichProvider(i.repoPath);if(e.isCancellationRequested)return;let n,o;if(null!=s?.provider){const[t,a]=await Promise.allSettled([g.D.get("views.commitDetails.autolinks.enabled")&&g.D.get("views.commitDetails.autolinks.enhanced")?this.container.autolinks.getLinkedIssuesAndPullRequests(i.message??i.summary,s):void 0,g.D.get("views.commitDetails.pullRequests.enabled")?i.getAssociatedPullRequest({remote:s}):void 0]);if(e.isCancellationRequested)return;n=(0,D.Sb)(t),o=(0,D.Sb)(a)}const a=this.getFormattedMessage(i,s,n);null!=o&&n?.delete(o.id),this.updatePendingContext({richStateLoaded:!0,formattedMessage:a,autolinkedIssues:null!=n?[...n.values()]:void 0,pullRequest:o}),this.updateState()}async updateCommit(t,e){if(!e?.force&&this._context.commit?.sha===t?.ref)return;let i;if(this._commitDisposable?.dispose(),(0,h.f_)(t))i=t;else if(null!=t)if("stash"===t.refType){const e=await this.container.git.getStash(t.repoPath);i=e?.commits.get(t.ref)}else i=await this.container.git.getCommit(t.repoPath,t.ref);if(i?.isUncommitted){const t=this.container.git.getRepository(i.repoPath);this._commitDisposable=s.Disposable.from(t.startWatchingFileSystem(),t.onDidChangeFileSystem((()=>{this.updatePendingContext({commit:i},!0),this.updateState()})))}this.updatePendingContext({commit:i,richStateLoaded:Boolean(i?.isUncommitted)||!(0,f.fw)("gitlens:hasConnectedRemotes"),formattedMessage:void 0,autolinkedIssues:void 0,pullRequest:void 0},e?.force),null!=e?.pinned&&this.updatePinned(e?.pinned),this.isLineTrackerSuspended&&this.ensureTrackers(),null!=i&&(e?.skipStack||this._commitStack.add((0,p.qj)(i)),this.updateNavigation()),this.updateState(e?.immediate??!0)}updatePinned(t,e){t!==this._context.pinned&&(this._pinned=t,this.ensureTrackers(),this.updatePendingContext({pinned:t}),this.updateState(e))}updatePreferences(t){if(this._context.preferences?.autolinksExpanded===t.autolinksExpanded&&this._context.preferences?.avatars===t.avatars&&this._context.preferences?.dismissed===t.dismissed&&this._context.preferences?.files===t.files&&this._context.preferences?.files?.compact===t.files?.compact&&this._context.preferences?.files?.icon===t.files?.icon&&this._context.preferences?.files?.layout===t.files?.layout&&this._context.preferences?.files?.threshold===t.files?.threshold)return;const e={...this._context.preferences,...this._pendingContext?.preferences};null!=t.autolinksExpanded&&this._context.preferences?.autolinksExpanded!==t.autolinksExpanded&&(this.container.storage.storeWorkspace("views:commitDetails:autolinksExpanded",t.autolinksExpanded),e.autolinksExpanded=t.autolinksExpanded),null!=t.avatars&&this._context.preferences?.avatars!==t.avatars&&(g.D.updateEffective("views.commitDetails.avatars",t.avatars),e.avatars=t.avatars),null!=t.dismissed&&this._context.preferences?.dismissed!==t.dismissed&&(this.container.storage.store("views:commitDetails:dismissed",t.dismissed),e.dismissed=t.dismissed),null!=t.files&&this._context.preferences?.files!==t.files&&(this._context.preferences?.files?.compact!==t.files?.compact&&g.D.updateEffective("views.commitDetails.files.compact",t.files?.compact),this._context.preferences?.files?.icon!==t.files?.icon&&g.D.updateEffective("views.commitDetails.files.icon",t.files?.icon),this._context.preferences?.files?.layout!==t.files?.layout&&g.D.updateEffective("views.commitDetails.files.layout",t.files?.layout),this._context.preferences?.files?.threshold!==t.files?.threshold&&g.D.updateEffective("views.commitDetails.files.threshold",t.files?.threshold),e.files=t.files),this.updatePendingContext({preferences:e})}updatePendingContext(t,e=!1){const[i,s]=(0,x.OY)(this._context,this._pendingContext,t,e);return i&&(this._pendingContext=s),i}updateState(t=!1){t?this.notifyDidChangeState():(null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,v.Ds)(this.notifyDidChangeState.bind(this),500)),this._notifyDidChangeStateDebounced())}updateNavigation(){let t=this._commitStack.get(this._commitStack.position-1)?.ref;null!=t&&(t=(0,p.zL)(t)),this.updatePendingContext({navigationStack:{count:this._commitStack.count,position:this._commitStack.position,hint:t}}),this.updateState()}async notifyDidChangeState(){const t=(0,S.UH)();if(this._notifyDidChangeStateDebounced?.cancel(),null==this._pendingContext)return!1;const e={...this._context,...this._pendingContext};return s.window.withProgress({location:{viewId:this.host.id}},(async()=>{try{await this.host.notify(I,{state:await this.getState(e)})&&(this._context=e,this._pendingContext=void 0)}catch(e){w.Yd.error(t,e)}}))}getBestCommitOrStash(){if(this._pinned)return;let t;if("graph"!==this.options.mode&&null!=s.window.activeTextEditor){const{lineTracker:e}=this.container,i=e.selections?.[0].active;null!=i&&(t=e.getState(i)?.commit)}else if(t=this._pendingContext?.commit,null==t){const e=this.container.events.getCachedEventArgs("commit:selected");t=e?.commit}return t}async getDetailsModel(t,e){const[i,o,a]=await Promise.allSettled([t.hasFullDetails()?t:t.ensureFullDetails().then((()=>t)),t.author.getAvatarUri(t,{size:32}),this.container.git.getBestRemoteWithRichProvider(t.repoPath,{includeDisconnected:!0})]);t=(0,D.Sb)(i,t);const r=(0,D.Sb)(o),c=(0,D.Sb)(a);let h;if(null==e&&(e=this.getFormattedMessage(t,c)),null!=t.message){const e=this.container.autolinks.getAutolinks(t.message);if(null!=c){const i=this.container.autolinks.getAutolinks(t.message,c);h=new Map((0,_.G0)(i,e))}else h=e}return{sha:t.sha,shortSha:t.shortSha,isStash:"stash"===t.refType,message:e,author:{...t.author,avatar:r?.toString(!0)},files:t.files?.map((({status:t,repoPath:e,path:i,originalPath:n})=>{const o=(0,l.tK)(t);return{path:i,originalPath:n,status:t,repoPath:e,icon:{dark:this.host.asWebviewUri(s.Uri.joinPath(this.host.getRootUri(),"images","dark",o)).toString(),light:this.host.asWebviewUri(s.Uri.joinPath(this.host.getRootUri(),"images","light",o)).toString()}}})),stats:t.stats,autolinks:null!=h?[...(0,_.UI)(h.values(),n.G)]:void 0}}getFormattedMessage(t,e,i){let s=c.i.fromTemplate("${message}",t);const n=s.indexOf("\n");return-1!==n&&(s=`${s.substring(0,n)}\0\n\0${s.substring(n+1)}`),g.D.get("views.commitDetails.autolinks.enabled")?this.container.autolinks.linkify(s,"html",null!=e?[e]:void 0,i):s}async getFileCommitFromParams(t){const e=await(this._context.commit?.getCommitForFile(t.path));return null!=e?[e,e.file]:void 0}showAutolinkSettings(){(0,u.P0)(o.Gh.ShowSettingsPageAndJumpToAutolinks)}showCommitSearch(){(0,a.m)({command:"search",state:{openPickInView:!0}})}showCommitPicker(){(0,a.m)({command:"log",state:{reference:"HEAD",repo:this._context.commit?.repoPath,openPickInView:!0}})}showCommitActions(){null==this._context.commit||this._context.commit.isUncommitted||(0,r.$J)(this._context.commit)}async showFileActions(t){const e=await this.getFileCommitFromParams(t);if(null==e)return;const[i,s]=e;this.suspendLineTracker(),(0,r.$J)(i,s)}async openFileComparisonWithWorking(t){const e=await this.getFileCommitFromParams(t);if(null==e)return;const[i,s]=e;this.suspendLineTracker(),(0,r.ce)(s.path,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(t)})}async openFileComparisonWithPrevious(t){const e=await this.getFileCommitFromParams(t);if(null==e)return;const[i,s]=e;this.suspendLineTracker(),(0,r.vw)(s.path,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(t)}),this.container.events.fire("file:selected",{uri:s.uri},{source:this.host.id})}async openFile(t){const e=await this.getFileCommitFromParams(t);if(null==e)return;const[i,s]=e;this.suspendLineTracker(),(0,r.ZB)(s.path,i,{preserveFocus:!0,preview:!0,...this.getShowOptions(t)})}async openFileOnRemote(t){const e=await this.getFileCommitFromParams(t);if(null==e)return;const[i,s]=e;(0,r.YM)(s.path,i)}getShowOptions(t){return t.showOptions}}Y([(0,k.fF)({args:!1})],CommitDetailsWebviewProvider.prototype,"getState",1),Y([(0,k.fF)({args:!1})],CommitDetailsWebviewProvider.prototype,"updateRichState",1)}};