{
    "phptools.activate.title": "Activate License",
    "phptools.requesttrial.title": "Begin Free Trial ...",
    "phptools.releasenotes.title": "Release Notes",
    "phptools.todo.search.title": "Search todo ...",
    "phptools.selectPhpVersion.title": "Select PHP version ...",
    "phptools.problems.scope": "Background Code Analysis",

    "php.problems.scope.none": "Workspace won't be analysed.",
    "php.problems.scope.opened": "Only opened documents will be analyzed for problems.",
    "php.problems.scope.user": "Workspace will be analyzed excluding the root `\"/vendor\"` folder.",
    "php.problems.scope.all": "Entire workspace will be analyzed continuously. (PREMIUM)",

    "php.workspace.shortOpenTag": "",
    "php.workspace.shortOpenTag.auto": "Enable short open tags unless there is `<?xml` tag.",
    "php.workspace.shortOpenTag.true": "Enable PHP code inside short open tags.",
    "php.workspace.shortOpenTag.false": "Disable PHP code inside short open tags.",

    "php.inlayHints.parameters.enabled": "Display inlay parameter names.\n```phpx\nfoo( /*name:*/ x ); \n```\n",
    "php.inlayHints.parameters.suppressNameMatchingValue": "Suppress inlay parameter name hint, when the parameter name matches the argument value.\n```phpx\n// foo( name: $name ); # suppress 'name:' because the argument looks the same\nfoo( $name );\n```\n",
    "php.inlayHints.parameters.byReference": "Display inlay `&` sign in front of arguments passed by reference.\n```phpx\nfoo( /*&*/$x ); // show '&' because '$x' is passed by reference \n```\n",
    "php.inlayHints.types.return": "Display inlay function return type inferred from the function code.\n```phpx\nfunction foo()/*: void*/ {\n```\n",
    "php.inlayHints.types.return.true": "**Enable** for all functions without a type hint",
    "php.inlayHints.types.return.false": "**Disable**",
    "php.inlayHints.types.return.named": "Only for global functions and methods. Disabled for anonymous and arrow functions.",
    "php.inlayHints.types.variable": "Display assigned variable type.\n```phpx\n$value/*: int*/ = strlen('str');\n```\n",
    "php.inlayHints.types.suppressVariableFromLiteral": "Suppress inlay hint for obvious variable assignments.\n```phpx\n$value/*: int*/ = 1;\n```\n",

    "capabilities.virtualWorkspaces.description": "In virtual workspaces, not all files might be loaded and resolving and finding references might be limited.",

    "php.format.codeStyle.description": "Base code formatting style.",

    "php.format.rules.keepControlStatementsOnOneLine.description": "Control statements are kept on one line.\n```phpx\n\n//Enabled                //Disabled\nif ($x) return;          if ($x)\n                         \treturn;\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.openBraceOnNewLineForFunctions.description": "Place open brace `{` on a new line for methods, functions and constructors.\n```phpx\n\n//Enabled               //Disabled\nfunction foo()          function foo() {\n{                       }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.openBraceOnNewLineForLambdas.description": "Place open brace `{` on a new line for lambda functions.\n```phpx\n\n//Enabled                      //Disabled\n$lambda = function ()          $lambda = function () {\n{                              }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.openBraceOnNewLineForAnonymousClasses.description": "Place open brace `{` on a new line for anonymous classes.\n```phpx\n\n//Enabled                                       //Disabled\n$c = new class extends \\Foo implements          $c = new class extends \\Foo implements\n    \\ArrayAccess                                    \\ArrayAccess {\n{                                               };\n};\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.openBraceOnNewLineForTypes.description": "Place open brace `{` on a new line for types.\n```phpx\n\n//Enabled                                //Disabled\nclass X extends \\Foo implements          class X extends \\Foo implements\n    \\ArrayAccess                             \\ArrayAccess {\n{                                        }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.openBraceOnNewLineForNamespaces.description": "Place open brace `{` on a new line for namespace declarations.\n```phpx\n\n//Enabled            //Disabled\nnamespace A          namespace A {\n{                    }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.openBraceOnNewLineForBlocks.description": "Place open brace `{` on a new line for all types of code blocks, except for those controlled by other formatting rules.\n```phpx\n\n//Enabled          //Disabled\nif (true)          if (true) {\n{                  }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.indentBraces.description": "Indent curly braces (`{` and `}`).\n```phpx\n\n//Enabled                  //Disabled\nfunction foo()             function foo()\n    {                      {\n    echo \"Hello\";              echo \"Hello\";\n    }                      }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceAfterCast.description": "Insert a space after a cast operator.\n```phpx\n\n//Enabled                 //Disabled\n$x = (int) $obj;          $x = (int)$obj;\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceAfterUnaryNot.description": "Insert a space after a unary not operator.\n```phpx\n\n//Enabled             //Disabled\n$x = ! $obj;          $x = !$obj;\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceAroundConcatenation.description": "Insert a space around concatenation operator.\n```phpx\n\n//Enabled                    //Disabled\n$x = $str1 . $str2;          $x = $str1.$str2;\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceBeforeParenthesesInArrowFunctions.description": "Insert a space before arrow function parentheses.\n```phpx\n\n//Enabled                 //Disabled\n$x = fn () => 1;          $x = fn() => 1;\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceBeforeParenthesesInControlStatements.description": "Insert a space before parentheses in control statements.\n```phpx\n\n//Enabled          //Disabled\nif (true)          if(true)\n{                  {\n}                  }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceBeforeParenthesesInCalls.description": "Insert a space before parentheses in method, function and constructor call parentheses.\n```phpx\n\n//Enabled        //Disabled\nfoo ();          foo();\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceBeforeParenthesesInDeclarations.description": "Insert a space before parentheses in method, function and constructor declaration parentheses.\n```phpx\n\n//Enabled                //Disabled\nfunction foo ()          function foo()\n{                        {\n}                        }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceBeforeColonInControlStatements.description": "Insert a space before colon in control flow blocks.\n```phpx\n\n//Enabled            //Disabled\nif (true) :          if (true):\nendif;               endif;\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceBeforeColonInReturnType.description": "Insert a space before colon in a return type\n```phpx\n\n//Enabled                       //Disabled\nfunction foo() : int {          function foo(): int {\n}                               }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinCallParens.description": "Insert a space within method, function and constructor call parentheses.\n```phpx\n\n//Enabled             //Disabled\nfoo( 1, 2 );          foo(1, 2);\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinDeclParens.description": "Insert a space within method, function and constructor declaration parentheses.\n```phpx\n\n//Enabled                           //Disabled\nfunction foo( $x, $y ) { }          function foo($x, $y) { }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinArrayInitilizersParens.description": "Insert a space within array initializer parentheses.\n```phpx\n\n//Enabled                                           //Disabled\n$x = array( 1 => \"first\", 2 => \"second\" );          $x = array(1 => \"first\", 2 => \"second\");\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinIfParens.description": "Insert a space within `if` statement header parentheses.\n```phpx\n\n//Enabled                //Disabled\nif ( true ) { }          if (true) { }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinWhileParens.description": "Insert a space within `while` statement header parentheses.\n```phpx\n\n//Enabled                       //Disabled\nwhile ( $a != $b ) { }          while ($a != $b) { }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinForParens.description": "Insert a space within `for` statement header parentheses.\n```phpx\n\n//Enabled                                   //Disabled\nfor ( $i = 0; $i < 100; $i++ ) { }          for ($i = 0; $i < 100; $i++) { }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinForeachParens.description": "Insert a space within `foreach` statement header parentheses.\n```phpx\n\n//Enabled                                        //Disabled\nforeach ( $expr as $key => $value ) { }          foreach ($expr as $key => $value) { }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinSwitchParens.description": "Insert a space within `switch` statement header parentheses.\n```phpx\n\n//Enabled                  //Disabled\nswitch ( $x ) { }          switch ($x) { }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinCatchParens.description": "Insert a space within `catch` statement header parentheses.\n```phpx\n\n//Enabled                                //Disabled\ntry { } catch ( Exception ) { }          try { } catch (Exception) { }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinBrackets.description": "Insert a space within brackets.\n```phpx\n\n//Enabled              //Disabled\n$y = $x[ 1 ];          $y = $x[1];\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinBracketsAroundExpression.description": "Insert a space within brackets around expression.\n```phpx\n\n//Enabled                   //Disabled\n$y = $x[ $i + 1 ];          $y = $x[$i + 1];\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.spaceWithinExpressionParens.description": "Insert a space within parentheses around expression.\n```phpx\n\n//Enabled                //Disabled\n$x = ( 1 + 2 );          $x = (1 + 2);\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.arrayInitializersWrap.description": "Defines wrapping behavior for array initializers.\n* `Off` - No wrapping is applied\r\n* `On every item` - When this option is selected each item is placed on a new line and properly indented if the array initializer is split across multiple lines.\r\n\r\n\n",
    "php.format.rules.arrayInitializersNewLineBeforeFirstElement.description": "Place a new line before the first array element when wrapping.\n```phpx\n\n//Enabled       //Disabled\n$x = [          $x = [1, \n    1,              2\n    2           ];\n];\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.arrayInitializersNewLineAfterLastElement.description": "Place a new line after the last element when wrapping.\n```phpx\n\n//Enabled       //Disabled\n$x = [          $x = [\n    1,              1, \n    2               2];\n];\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.arrayInitializersAlignKeyValuePairs.description": "Automatically align `=>` operators.\n```phpx\n\n//Enabled                   //Disabled\n$x = [                      $x = [\n    1    => 'foo',              1 => 'foo',\n    1234 => 'bar'               1234 => 'bar'\n];                          ];\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.callParametersWrap.description": "Defines wrapping behavior for method, function and constructor call parameters.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each item is placed on a new line and properly indented if the call arguments are split across multiple lines.\n\n\n",
    "php.format.rules.callParametersNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` when wrapping.\n```phpx\n\n//Enabled       //Disabled\nfoo(            foo(1,\n    1,              2\n    2           );\n);\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.callParametersNewLineBeforeRightParen.description": "Place a new line before the right closing parenthesis `)` when wrapping.\n```phpx\n\n//Enabled       //Disabled\nfoo(            foo(\n    1,              1,\n    2               2);\n);\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.declParametersWrap.description": "Defines wrapping behavior for method or function declaration parameters.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each declaration parameter is placed on a new line and properly indented if the arguments are split across multiple lines.\n\n",
    "php.format.rules.declParametersNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` of function or method declaration header when wrapping.\n```phpx\n\n//Enabled              //Disabled\nfunction foo(          function foo($x,\n    $x,                    $y\n    $y                 ) {\n) {                    }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.declParametersNewLineBeforeRightParen.description": "Place a new line before the right closing parenthesis `)` of a function or method declaration header when wrapping.\n```phpx\n\n//Enabled              //Disabled\nfunction foo(          function foo(\n    $x,                    $x,\n    $y                     $y) {\n) {                    }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.declKeepRightParenAndOpenBraceOnOneLine.description": "Keep the right closing parenthesis `)` of a function or method declaration header on the one line as opening brace of the body `{`.\n```phpx\n\n//Enabled              //Disabled\nfunction foo(          function foo(\n    $x,                    $x,\n    $y                     $y\n) {                    )\n}                      {\n                       }\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.whileStatementNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` in a `while` statement header if it's split across multiple lines.\n```phpx\n\n//Enabled            //Disabled\nwhile(               while($x == 2\n    $x == 2          ) {\n) {                  }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.whileStatementNewLineBeforeRightParen.description": "Place a new line after the right closing parenthesis `)` in a `while` statement header if it's split across multiple lines.\n```phpx\n\n//Enabled            //Disabled\nwhile(               while(\n    $x == 2              $x == 2) {\n) {                  }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.forStatementWrap.description": "Defines wrapping behavior for `for` statement.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each item in `for` statement is placed on a new line and properly indented if they are split across multiple lines.\n\n\n\n",
    "php.format.rules.forStatementNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` in a `for` statement header if it's split across multiple lines.\n```phpx\n\n//Enabled              //Disabled\nfor(                   for($i = 0; \n    $i = 0;                $i < 100;\n    $i < 100;              $i++\n    $i++               ) {\n) {                    }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.forStatementNewLineBeforeRightParen.description": "Place a new line after the right closing parenthesis `)` in a `for` statement header if it's split across multiple lines.\n```phpx\n\n//Enabled              //Disabled\nfor(                   for($i = 0; \n    $i = 0;                $i < 100;\n    $i < 100;              $i++\n    $i++               ) {\n) {                    }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.ifStatementNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` in a `if` or `elseif` statement header if it's split across multiple lines.\n```phpx\n\n//Enabled         //Disabled\nif(               if(true\n    true          ) {\n) {               }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.ifStatementNewLineBeforeRightParen.description": "Place a new line after the right closing parenthesis `)` in a `if` or `elseif` statement header if it's split across multiple lines.\n```phpx\n\n//Enabled         //Disabled\nif(               if(\n    true              true) {\n) {               }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.elseOnNewLine.description": "Place `else` on a new line.\n```phpx\n\n//Enabled          //Disabled\nif (true)          if (true)\n{                  {\n}                  } else\nelse               {\n{                  }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.switchStatementNewLineAfterLeftParen.description": "Place a new line after the left opening parenthesis `(` in a `switch` statement header if it's split across multiple lines.\n```phpx\n\n//Enabled        //Disabled\nswitch(          switch($x\n    $x           ) {\n) {              }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.switchStatementNewLineBeforeRightParen.description": "Place a new line after the right closing parenthesis `)` in a `switch` statement header if it's split across multiple lines.\n```phpx\n\n//Enabled        //Disabled\nswitch(          switch(\n    $x               $x) {\n) {              }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.catchOnNewLine.description": "Place `catch` on a new line.\n```phpx\n\n//Enabled        //Disabled\ntry              try\n{                {\n}                } catch\ncatch            {\n{                }\n}                finally\nfinally          {\n{                }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.finallyOnNewLine.description": "Place `finally` on a new line.\n```phpx\n\n//Enabled        //Disabled\ntry              try\n{                {\n}                } \ncatch            catch\n{                {\n}                } finally\nfinally          {\n{                }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.implementsListWrap.description": "Defines wrapping behavior for `implements` list in type declarations.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each interface in `implements` list is placed on a new line and properly indented if they are split across multiple lines.\n\n\n",
    "php.format.rules.newLineAfterImplements.description": "Place a new line after `implements` in type declaration if the list of interfaces is split across multiple lines.\n```phpx\n\n//Enabled                   //Disabled\nclass X implements          class X implements A, \n    A,                          B, \n    B,                          C\n    C                       {\n{                           }\n}\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.groupUseWrap.description": "Defines wrapping behavior for group `use` list in type declarations.\n* `Off` - No wrapping is applied\n* `On every item` - When this option is selected each declaration in group `use` list is placed on a new line and properly indented if they are split across multiple lines.\n\n",
    "php.format.rules.groupUseNewLineBeforeFirstDeclaration.description": "Place a new line before first group `use` declaration if the list of declarations is split across multiple lines.\n```phpx\n\n//Enabled                    //Disabled\nuse Vendor\\pkg\\ns\\{          use Vendor\\pkg\\ns\\{ns1\\A,\n    ns1\\A,                       ns2\\B,\n    ns2\\B,                   };\n};\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    "php.format.rules.alignConsecutiveAssignments.description": "Automatically align consecutive `=` assignments\n```phpx\n\n//Enabled            //Disabled\n$a     = 1;          $a = 1;\n$bbb   = 2;          $bbb = 2;\n$ccccc = 3;          $ccccc = 3;\n\n\n```\nRequires [`PREMIUM`](command:phptools.activatewindow)\n",
    
    "_inherit": "Inherit",
    "_on_every_item": "On every item",
    "_off": "Off",

    "php.format.rules.wrap.inherit.description": "Setting is inherited from base formatting style `php.format.codeStyle`",
    "php.format.rules.wrap.off.description" : "No wrapping is applied.",
    "php.format.rules.wrap.onEveryItem.description" : "Each item is placed on a new line and properly indented if the call arguments are split across multiple lines."
}