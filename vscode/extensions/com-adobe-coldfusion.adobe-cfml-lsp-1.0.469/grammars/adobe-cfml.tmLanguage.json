{
    "name": "CFML",
    "scopeName": "source.cfm",

    "patterns": [
      {
        "begin": "(?i)(?=^\\s*(/\\*|//|import\\b|(component|abstract\\s*component|final\\s*component|interface)(\\s+|{)))",
        "contentName": "source.cfml.script",
        "end": "(?=till)end",
        "patterns": [
          {
            "include": "#source-cfml-script"
          }
        ]
      },
      {
        "include": "#source-cfml-tag-comments"
      },
      {
        "include": "#hash-delimiters"
      },
      {
        "begin": "(?=\\S)",
        "contentName": "text.cfml",
        "end": "(?=till)end",
        "patterns": [
          {
            "include": "#tags"
          }
        ]
      }
    ],
    "repository": {
        "tags": {
            "patterns": [
              {
                "include": "#source-cfml-tag-comments"
              },
              {
                "include": "#hash-delimiters"
              },
              {
                "include": "#cffunction"
              },
              {
                "include": "#cfoutput"
              },
              {
                "include": "#cfmail"
              },
              {
                "include": "#cfquery"
              },
              {
                "include": "#cfif"
              },
              {
                "include": "#tags-with-script"
              },
              {
                "include": "#cfscript"
              },
              {
                "include": "#cfproperty"
              },
              {
                "include": "#cfargument"
              },
              {
                "include": "#custom-tags"
              },
              {
                "include": "#extension-tags"
              },
              {
                "name": "meta.tag.cfml",
                "begin": "(?i)(<)(cf(?:applet|calendar|graph|graphdata|mediaplayer|menu|servlet|servletparam|sprydataset|table|textinput|tree))",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml invalid.deprecated.tag.cfml"
                  }
                },
                "end": "(/?>)",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "name": "meta.tag.cfml",
                "begin": "(?i)(<)(cf[a-z_]+)",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml"
                  }
                },
                "end": "(/?>)",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "name": "meta.tag.cfml",
                "match": "(?i)(</)(cf(?:applet|calendar|graph|graphdata|mediaplayer|menu|servlet|servletparam|sprydataset|table|textinput|tree))(>)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml invalid.deprecated.tag.cfml"
                  },
                  "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                }
              },
              {
                "name": "meta.tag.cfml",
                "match": "(?i)(</)(cf[a-z_]+)(>)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml"
                  },
                  "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                }
              },
              {
                "include": "#cf-html-tags"
              }
            ]
          },

          "cf-html-tags":{
              "patterns":[
                  {
                        "include":"#cf-css"
                  },
                  {
                        "include":"#cf-js"
                  },
                  {
                    "begin": "(?i)(<)([a-z0-9:-]+)(?=\\s|/?>)",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.tag.metadata.tag.start.html"
                        },
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        },
                        "2": {
                            "name": "entity.name.tag.html"
                        }
                    },
                    "end": "(/?>)",
                    "endCaptures": {

                        "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }

                    },
                    "name": "meta.embedded.block.html",
                    "patterns":[{
                        "begin": "\\G",
                        "captures": {
                            "1": {
                                "name": "punctuation.definition.tag.end.html"
                            }
                        },
                        "end": "(?=/?>)",
                        "name": "meta.tag.metadata.tag.start.html",
                        "patterns": [
                            {
                                "include": "#tag-generic-attribute"
                            }
                        ]
                    }]
                },
                {
                    "begin": "(?i)(</)([a-z0-9:-]+)(?=\\s|/?>)",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.tag.metadata.tag.start.html"
                        },
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        },
                        "2": {
                            "name": "entity.name.tag.html"
                        }
                    },
                    "end": "(/?>)",
                    "endCaptures": {
                       "1": {
                            "name": "punctuation.definition.tag.end.html"
                        }

                    }
                }

                    ]
          },
          "cf-js": {
            "begin": "(?i)(?=<script\\b)",
            "end": "(?i)(</)(script)(\\s*>)",
            "endCaptures": {
              "0": {
                "name": "meta.tag.html"
              },
              "1": {
                "name": "punctuation.definition.tag.begin.html"
              },
              "2": {
                "name": "entity.name.tag.html"
              },
              "3": {
                "name": "punctuation.definition.tag.end.html"
              }
            },
            "patterns": [
              {
                "name": "meta.tag.html",
                "begin": "(?i)(<)(script)(?=\\s|>)",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.html"
                  },
                  "2": {
                    "name": "entity.name.tag.html"
                  }
                },
                "end": "(?=>)",
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "begin": ">",
                "beginCaptures": {
                  "0": {
                    "name": "meta.tag.cfml punctuation.definition.tag.end.html"
                  }
                },
                "contentName": "meta.embedded.block.html",
                "end": "(?i)(?=</script\\s*>)",
                 "patterns":[{
                        "include":"source.js"
                    }]
              }
            ]
          },
          "cf-css":{
            "patterns":[{
                "begin": "(?i)(<)(style)(>)",
                              "beginCaptures": {
                                "0": {
                                    "name": "meta.tag.metadata.style.start.html"
                                },
                                  "1": {
                                      "name": "punctuation.definition.tag.begin.html"
                                  },
                                  "2": {
                                      "name": "entity.name.tag.html"
                                  },
                                  "3":{
                                    "name": "punctuation.definition.tag.end.html"
                                  }
                              },
                              "end": "(?i)((<)/)(style)\\s*(>)",
                              "endCaptures": {
                                  "0": {
                                      "name": "meta.tag.metadata.style.end.html"
                                  },
                                  "1": {
                                      "name": "punctuation.definition.tag.begin.html"
                                  },
                                  "2": {
                                      "name": "source.css-ignored-vscode"
                                  },
                                  "3": {
                                      "name": "entity.name.tag.html"
                                  },
                                  "4": {
                                      "name": "punctuation.definition.tag.end.html"
                                  }
                              },
                              "name": "meta.embedded.block.html",
                              "patterns":[{
                                "include":"source.css"
                            }]


                          }]
          },
          "custom-tags": {
            "patterns": [
              {
                "name": "meta.tag.custom.cfml",
                "begin": "(?i)(<)(cf_[a-z_-]*)",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.custom.cfml"
                  }
                },
                "end": "(/?>)",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "name": "meta.tag.custom.cfml",
                "match": "(?i)(</)(cf_[a-z_-]*)(>)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.custom.cfml"
                  },
                  "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                }
              },
              {
                "name": "meta.tag.custom.cfml",
                "begin": "(?i)(<)([a-z]+)(\\:)([a-z_-]*)",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.custom.cfml"
                  },
                  "3": {
                    "name": "entity.name.tag.custom.cfml punctuation.separator.prefix.cfml"
                  },
                  "4": {
                    "name": "entity.name.tag.custom.cfml"
                  }
                },
                "end": "(/?>)",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "name": "meta.tag.custom.cfml",
                "match": "(?i)(</)([a-z]+\\:[a-z_-]*)(>)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.custom.cfml"
                  },
                  "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                }
              }
            ]
          },
          "extension-tags": {
            "patterns": [
              {
                "name": "meta.tag.extension.cfml",
                "begin": "(?i)(<)(cfx_[\\w-]+)",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.extension.cfml"
                  }
                },
                "end": "/?>",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "name": "meta.tag.extension.cfml",
                "match": "(?i)(</)(cfx_[\\w-]+)(>)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.extension.cfml"
                  },
                  "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                }
              }
            ]
          },
          "cffunction": {
            "begin": "(?i)(?=<cffunction\\b)",
            "end": "(?i)(</)(cffunction)(>)",
            "endCaptures": {
              "0": {
                "name": "meta.tag.cfml meta.function.cfml"
              },
              "1": {
                "name": "punctuation.definition.tag.begin.cfml"
              },
              "2": {
                "name": "entity.name.tag.cfml storage.type.function.cfml"
              },
              "3": {
                "name": "punctuation.definition.tag.end.cfml"
              }
            },
            "patterns": [
              {
                "name": "meta.tag.cfml meta.function.cfml",
                "begin": "(?i)(<)(cffunction)",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml storage.type.function.cfml"
                  }
                },
                "end": "(?=>)",
                "patterns": [
                  {
                    "match": "(?i)\\b(name)\\s*(=)\\s*((\")([_$a-zA-Z][$\\w]*)(\"))",
                    "captures": {
                      "1": {
                        "name": "entity.other.attribute-name.cfml"
                      },
                      "2": {
                        "name": "punctuation.separator.key-value.cfml"
                      },
                      "3": {
                        "name": "string.quoted.double.cfml"
                      },
                      "4": {
                        "name": "punctuation.definition.string.begin.cfml"
                      },
                      "5": {
                        "name": "entity.name.function.cfml"
                      },
                      "6": {
                        "name": "punctuation.definition.string.end.cfml"
                      }
                    }
                  },
                  {
                    "match": "(?i)\\b(access)\\s*(=)\\s*((\")(public|private|package|remote)(\"))",
                    "captures": {
                      "1": {
                        "name": "entity.other.attribute-name.cfml"
                      },
                      "2": {
                        "name": "punctuation.separator.key-value.cfml"
                      },
                      "3": {
                        "name": "string.quoted.double.cfml"
                      },
                      "4": {
                        "name": "punctuation.definition.string.begin.cfml"
                      },
                      "5": {
                        "name": "storage.modifier.cfml"
                      },
                      "6": {
                        "name": "punctuation.definition.string.end.cfml"
                      }
                    }
                  },
                  {
                    "match": "(?x)(?i)\n  \\b(returntype)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|void|xml) # return-type.primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #return-type component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
                    "captures": {
                      "1": {
                        "name": "entity.other.attribute-name.cfml"
                      },
                      "2": {
                        "name": "punctuation.separator.key-value.cfml"
                      },
                      "3": {
                        "name": "string.quoted.double.cfml"
                      },
                      "4": {
                        "name": "punctuation.definition.string.begin.cfml"
                      },
                      "5": {
                        "name": "meta.function.return-type.cfml"
                      },
                      "6": {
                        "name": "support.type.primitive.cfml"
                      },
                      "7": {
                        "name": "entity.name.type.object.cfml"
                      },
                      "8": {
                        "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                      },
                      "9": {
                        "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                      },
                      "10": {
                        "name": "punctuation.definition.string.end.cfml"
                      }
                    }
                  },
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "begin": ">",
                "beginCaptures": {
                  "0": {
                    "name": "meta.tag.cfml meta.function.cfml punctuation.definition.tag.end.cfml"
                  }
                },
                "contentName": "meta.function.body.tag.cfml",
                "end": "(?i)(?=</cffunction>)",
                "patterns": [
                  {
                    "include": "#tags"
                  }
                ]
              }
            ]
          },
          "cfoutput": {
            "begin": "(?i)(?=<cfoutput\\b)",
            "end": "(?i)(</)(cfoutput)(>)",
            "endCaptures": {
              "0": {
                "name": "meta.tag.cfml"
              },
              "1": {
                "name": "punctuation.definition.tag.begin.cfml"
              },
              "2": {
                "name": "entity.name.tag.cfml"
              },
              "3": {
                "name": "punctuation.definition.tag.end.cfml"
              }
            },
            "patterns": [
              {
                "name": "meta.tag.cfml",
                "begin": "(?i)(<)(cfoutput)",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml"
                  }
                },
                "end": "(?=>)",
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "begin": ">",
                "beginCaptures": {
                  "0": {
                    "name": "meta.tag.cfml punctuation.definition.tag.end.cfml"
                  }
                },
                "contentName": "meta.scope.cfoutput.cfml",
                "end": "(?i)(?=</cfoutput>)"

              }
            ]
          },
          "cfmail": {
            "begin": "(?i)(?=<cfmail\\b)",
            "end": "(?i)(</)(cfmail)(>)",
            "endCaptures": {
              "0": {
                "name": "meta.tag.cfml"
              },
              "1": {
                "name": "punctuation.definition.tag.begin.cfml"
              },
              "2": {
                "name": "entity.name.tag.cfml"
              },
              "3": {
                "name": "punctuation.definition.tag.end.cfml"
              }
            },
            "patterns": [
              {
                "name": "meta.tag.cfml",
                "begin": "(?i)(<)(cfmail)\\b",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml"
                  }
                },
                "end": "(?=>)",
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "begin": ">",
                "beginCaptures": {
                  "0": {
                    "name": "meta.tag.cfml punctuation.definition.tag.end.cfml"
                  }
                },
                "contentName": "meta.scope.cfmail.cfml",
                "end": "(?i)(?=</cfmail>)",
                "patterns": [
                  {
                    "include": "#tags"
                  }
                ]
              }
            ]
          },
          "cfquery": {
            "begin": "(?i)(?=<cfquery\\b)",
            "end": "(?i)(</)(cfquery)(\\s*>)",
            "endCaptures": {
              "0": {
                "name": "meta.tag.cfml"
              },
              "1": {
                "name": "punctuation.definition.tag.begin.cfml"
              },
              "2": {
                "name": "entity.name.tag.cfml"
              },
              "3": {
                "name": "punctuation.definition.tag.end.cfml"
              }
            },
            "patterns": [
              {
                "name": "meta.tag.cfml",
                "begin": "(?i)(<)(cfquery)(?=\\s|>)",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml"
                  }
                },
                "end": "(?=>)",
                "patterns": [
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              },
              {
                "begin": ">",
                "beginCaptures": {
                  "0": {
                    "name": "meta.tag.cfml punctuation.definition.tag.end.cfml"
                  }
                },
                "contentName": "meta.scope.cfquery.cfml meta.embedded.sql",
                "end": "(?i)(?=</cfquery\\s*>)",
                "patterns": [
                  {
                    "include": "#hash-delimiters"
                  },
                  {
                    "include": "#tags"
                  },
                  {
                    "include": "source.sql"
                  }
                ]
              }
            ]
          },
          "cfif": {
            "name": "meta.tag.cfml",
            "begin": "(?i)(<)(cfif|cfelseif)\\b",
            "beginCaptures": {
              "1": {
                "name": "punctuation.definition.tag.begin.cfml"
              },
              "2": {
                "name": "entity.name.tag.cfml"
              }
            },
            "contentName": "source.cfml.script",
            "end": ">",
            "endCaptures": {
              "0": {
                "name": "punctuation.definition.tag.end.cfml"
              }
            },
            "patterns": [
              {
                "include": "#source-cfml-script"
              }
            ]
          },
          "cfproperty": {
            "patterns": [
              {
                "name": "meta.tag.cfml meta.tag.property.cfml",
                "begin": "(?i)(<)(cfproperty)\\b",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml"
                  }
                },
                "end": "(/?>)",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "match": "(?i)\\b(name|type|required|default|displayname|hint|fieldtype|ormType|column|generator|sequence|selectkey|params|length|precision|index|setter|getter|source|elementcolumn|elementtype|structkeytype|structkeycolumn|inversejoincolumn|linkschema|linkcatalog|linktable|missingRowIgnored|inverse|orderby|fkcolumn|fetch|cascade|constrained|unique|uniquekey|notnull|update|insert|generated|formula|lazy|optimisticLock|scale|mappedby|cfc|joinColumn|validate|validateParams|cacheUse|sqlType|dbDefault|where|persistent|unSavedValue|serializable|singularname|remotingFetch|table)\\s*(=)\\s*(?:((\")([^<>\"']*)(\"))|((')([^<>\"']*)('))|([^<>\"'\\s]*))",
                    "captures": {
                      "1": {
                        "name": "entity.other.attribute-name.cfml"
                      },
                      "2": {
                        "name": "punctuation.separator.key-value.cfml"
                      },
                      "3": {
                        "name": "string.quoted.double.cfml"
                      },
                      "4": {
                        "name": "punctuation.definition.string.begin.cfml"
                      },
                      "5": {
                        "name": "meta.tag.property.name.cfml"
                      },
                      "6": {
                        "name": "punctuation.definition.string.end.cfml"
                      },
                      "7": {
                        "name": "string.quoted.single.cfml"
                      },
                      "8": {
                        "name": "punctuation.definition.string.begin.cfml"
                      },
                      "9": {
                        "name": "meta.tag.property.name.cfml"
                      },
                      "10": {
                        "name": "punctuation.definition.string.end.cfml"
                      },
                      "11": {
                        "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                      }
                    }
                  },
                  {
                    "match": "(?x)(?i)\n  \\b(type)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml) # primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
                    "captures": {
                      "1": {
                        "name": "entity.other.attribute-name.cfml"
                      },
                      "2": {
                        "name": "punctuation.separator.key-value.cfml"
                      },
                      "3": {
                        "name": "string.quoted.double.cfml"
                      },
                      "4": {
                        "name": "punctuation.definition.string.begin.cfml"
                      },
                      "5": {
                        "name": "storage.type.cfml"
                      },
                      "6": {
                        "name": "support.type.primitive.cfml"
                      },
                      "7": {
                        "name": "entity.name.type.object.cfml"
                      },
                      "8": {
                        "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                      },
                      "9": {
                        "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                      },
                      "10": {
                        "name": "punctuation.definition.string.end.cfml"
                      }
                    }
                  },
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              }
            ]
          },
          "cfargument": {
            "patterns": [
              {
                "name": "meta.tag.cfml meta.tag.argument.cfml",
                "begin": "(?i)(<)(cfargument)\\b",
                "beginCaptures": {
                  "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                  },
                  "2": {
                    "name": "entity.name.tag.cfml"
                  }
                },
                "end": "(/?>)",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "match": "(?i)\\b(name)\\s*(=)\\s*((\")([_$a-zA-Z][$\\w]*)(\"))",
                    "captures": {
                      "1": {
                        "name": "entity.other.attribute-name.cfml"
                      },
                      "2": {
                        "name": "punctuation.separator.key-value.cfml"
                      },
                      "3": {
                        "name": "string.quoted.double.cfml"
                      },
                      "4": {
                        "name": "punctuation.definition.string.begin.cfml"
                      },
                      "5": {
                        "name": "variable.parameter.function.cfml"
                      },
                      "6": {
                        "name": "punctuation.definition.string.end.cfml"
                      }
                    }
                  },
                  {
                    "match": "(?x)(?i)\n  \\b(type)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml) # primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
                    "captures": {
                      "1": {
                        "name": "entity.other.attribute-name.cfml"
                      },
                      "2": {
                        "name": "punctuation.separator.key-value.cfml"
                      },
                      "3": {
                        "name": "string.quoted.double.cfml"
                      },
                      "4": {
                        "name": "punctuation.definition.string.begin.cfml"
                      },
                      "5": {
                        "name": "storage.type.cfml"
                      },
                      "6": {
                        "name": "support.type.primitive.cfml"
                      },
                      "7": {
                        "name": "entity.name.type.object.cfml"
                      },
                      "8": {
                        "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                      },
                      "9": {
                        "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                      },
                      "10": {
                        "name": "punctuation.definition.string.end.cfml"
                      }
                    }
                  },
                  {
                    "include": "#tag-generic-attribute"
                  }
                ]
              }
            ]
          },
        "tag-generic-attribute": {
            "patterns": [
                {
                    "include": "#source-cfml-tag-comments"
                },
                {
                    "match": "\\b([a-zA-Z_][\\w:-]*)\\b",
                    "captures": {
                        "1": {
                            "name": "entity.other.attribute-name.cfml"
                        }
                    }
                },
                {
                    "begin": "=",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.key-value.cfml"
                        }
                    },
                    "end": "(?<=[^\\s=])|(?=[</>{;])",
                    "patterns": [
                        {
                            "include": "#source-cfml-tag-comments"
                        },
                        {
                            "include": "#source-cfml-string"
                        },
                        {
                            "name": "string.unquoted.cfml",
                            "begin": "(?=[^\\s</>{;\\'\"])",
                            "end": "(?=[\\s</>{;])",
                            "patterns": [
                                {
                                    "include": "#hash-delimiters"
                                },
                                {
                                    "include": "#source-cfml-script"
                                }

                            ]
                        }
                    ]
                },

                {
                    "include":"#tags"
                },
                {
                    "name": "invalid.illegal.attribute-name.cfml",
                    "match": "\\S+"
                }
            ]
        },


        "source-cfml-tag-comments": {
            "patterns": [
                {
                    "name": "comment.block.cfml",
                    "begin": "<!---",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    },
                    "end": "--->",
                    "patterns": [
                        {
                            "include": "#source-cfml-tag-comments"
                        }
                    ]
                }
            ]
        },

        "source-cfml-string": {
            "patterns": [
                {
                    "include": "#source-cfml-string-quoted-single"
                },
                {
                    "include": "#source-cfml-string-quoted-double"
                }
            ]
        },


        "source-cfml-string-quoted-single": {
            "name": "string.quoted.single.cfml",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                }
            },
            "end": "'(?!')",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.cfml"
                }
            },
            "patterns": [
                {
                    "include": "#tags"
                },
                {
                    "name": "constant.character.escape.quote.cfml",
                    "match": "''"
                }
            ]
        },

        "source-cfml-string-quoted-double": {
            "name": "string.quoted.double.cfml",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                }
            },
            "end": "\"(?!\")",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.cfml"
                }
            },
            "patterns": [
                {
                    "include": "#tags"
                },
                {
                    "name": "constant.character.escape.quote.cfml",
                    "match": "\"\""
                }
            ]
        },
        "hash-delimiters": {
            "patterns": [
                {
                    "name": "constant.character.escape.hash.cfml",
                    "match": "##"
                },
                {
                    "begin": "#",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.template-expression.begin.cfml"
                        }
                    },
                    "contentName": "meta.embedded.line.cfml source.cfml.script",
                    "end": "#",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.template-expression.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script"
                        }
                    ]
                }
            ]
        },

        "hash-delimiters-css": {
            "patterns": [
                {
                    "name": "constant.character.escape.hash.cfml",
                    "match": "##"
                },

                {
                    "begin": "(?=#)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.template-expression.begin.cfml"
                        }
                    },
                    "contentName": "meta.embedded.line.cfml.hash.delim",
                    "end": "(?=[^#].[{])",
                    "patterns": [
                        {
                            "include": "source.css"
                        }
                    ]
                },
                {
                    "include":"#hash-delimiters"
                }

            ]
        },


        "source-cfml-script": {
            "patterns": [
                {
                    "include": "#source-cfml-script-main"
                }
            ]
        },

        "source-cfml-script-keywords": {
            "patterns": [
              {
                "name": "keyword.control.throw.cfml",
                "match": "(?i)\\b(throw|rethrow)\\b(?!\\()"
              },
              {
                "name": "keyword.control.loop.cfml",
                "match": "(?i)(?<!\\.)\\b(break|continue)\\b"
              },
              {
                "name": "keyword.control.flow.cfml",
                "match": "(?i)(?<!\\.)\\b(abort)\\b"
              },
              {
                "begin": "(?i)(?<!\\.)\\b(return)\\b",
                "beginCaptures": {
                  "0": {
                    "name": "keyword.control.flow.cfml"
                  }
                },
                "end": "(?<=\\})|(?=[^\\s\\{])",
                "patterns": [
                  {
                    "include": "#source-cfml-script-struct-literal"
                  }
                ]
              },
              {
                "name": "storage.modifier.cfml",
                "match": "(?i)\\bfinal\\b"
              },
              {
                "name": "storage.type.cfml",
                "match": "(?i)\\bvar\\b"
              }
            ]
          },
        "source-cfml-script-main": {
            "patterns": [
                {
                    "include": "#source-cfml-script-keywords-top-level"
                },
                {
                    "include": "#source-cfml-script-component"
                },
                {
                    "include": "#source-cfml-script-statements"
                }
            ]
        },

        "source-cfml-script-keywords-top-level": {
            "patterns": [
                {
                    "name": "meta.import.cfml",
                    "begin": "(?i)\\bimport\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.import.cfml"
                        }
                    },
                    "end": "(?=\\n|;)",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-string"
                        },
                        {
                            "name": "variable.other.readwrite.alias.cfml",
                            "match": "[_$a-zA-Z][$\\w]*"
                        },
                        {
                            "name": "constant.language.import-all.cfml",
                            "match": "\\*"
                        }
                    ]
                }
            ]
        },

        "source-cfml-script-string-quoted-single": {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "string.quoted.single.cfml punctuation.definition.string.begin.cfml"
                }
            },
            "end": "(')(?!')",
            "endCaptures": {
                "1": {
                    "name": "string.quoted.single.cfml punctuation.definition.string.end.cfml"
                }
            },
            "patterns": [
                {
                    "name": "string.quoted.single.cfml constant.character.escape.quote.cfml",
                    "match": "''"
                },
                {
                    "name": "string.quoted.single.cfml",
                    "begin": "(?=\\S)",
                    "end": "(?='[^'])",
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml",
                            "match": "''"
                        },
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.cfml",
                    "match": "[\\s\\n]"
                }
            ]
        },

        "source-cfml-script-string-quoted-double": {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "string.quoted.double.cfml punctuation.definition.string.begin.cfml"
                }
            },
            "end": "(\")(?!\")",
            "endCaptures": {
                "1": {
                    "name": "string.quoted.double.cfml punctuation.definition.string.end.cfml"
                }
            },
            "patterns": [
                {
                    "name": "string.quoted.double.cfml constant.character.escape.quote.cfml",
                    "match": "\"\""
                },
                {
                    "name": "string.quoted.double.cfml",
                    "begin": "(?=\\S)",
                    "end": "(?=\"[^\"])",
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml",
                            "match": "\"\""
                        },
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }
                    ]
                },
                {
                    "name": "string.quoted.double.cfml",
                    "match": "[\\s\\n]"
                }
            ]
        },


        "source-cfml-script-hash-delimiters": {
            "patterns": [
                {
                    "name": "constant.character.escape.hash.cfml",
                    "match": "##"
                },
                {
                    "begin": "#",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.template-expression.begin.cfml"
                        }
                    },
                    "contentName": "meta.embedded.line.cfml source.cfml.script",
                    "end": "#",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.template-expression.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                }
            ]
        }
        ,

        "source-cfml-script-expressions": {
            "patterns": [
                {
                    "include": "#source-cfml-script-comments"
                },
                {
                    "include": "#source-cfml-script-string"
                },
                {
                    "include": "#source-cfml-script-constructor"
                },
                {
                    "include": "#source-cfml-script-operators"
                },
                {
                    "include": "#source-cfml-script-keywords"
                },
                {
                    "include": "#source-cfml-script-constants"
                },
                {
                    "include": "#source-cfml-script-named-function"
                },
                {
                    "include": "#source-cfml-script-anonymous-function"
                },
                {
                    "include": "#source-cfml-script-struct-literal"
                },
                {
                    "include": "#source-cfml-script-brackets"
                },
                {
                    "include": "#source-cfml-script-number"
                },
                {
                    "include": "#source-cfml-script-call"
                },
                {
                    "include": "#source-cfml-script-variable"
                },
                {
                    "include": "#source-cfml-script-punctuation"
                }
            ]
        },
        "source-cfml-script-constructor": {
            "name": "meta.instance.constructor.cfml",
            "begin": "(?i)\\b(new)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.operator.new.cfml"
                }
            },
            "end": "(\\))|(?=[^_$\\w.\\(\\)])",
            "endCaptures": {
                "1": {
                    "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
                }
            },
            "patterns": [
                {
                    "name": "entity.name.class.cfml",
                    "match": "\\b[_$a-zA-Z][$\\w\\.]*"
                },
                {
                    "name": "meta.function-call.parameters.method.cfml",
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.arguments.begin.cfml"
                        }
                    },
                    "end": "(?=\\))",
                    "patterns": [
                        {
                            "name": "punctuation.separator.function-call.method.cfml",
                            "match": ","
                        },
                        {
                            "begin": "\\b(?i:(argumentCollection)|([_$a-zA-Z][$\\w]*))\\s*(=)(?!=)",
                            "beginCaptures": {
                                "1": {
                                    "name": "entity.other.argumentCollection.cfml"
                                },
                                "2": {
                                    "name": "entity.other.parameter-name.cfml"
                                },
                                "3": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            },
                            "end": "(?=[,\\)])",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        },
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                }
            ]
        },

        "source-cfml-script-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.logical.cfml",
                    "match": "!(?!=)"
                },
                {
                    "name": "keyword.operator.decrement.cfml",
                    "match": "--"
                },
                {
                    "name": "keyword.operator.increment.cfml",
                    "match": "\\+\\+"
                },
                {
                    "name": "keyword.operator.new.cfml",
                    "match": "\\b(?i:new)\\b"
                },
                {
                    "begin": "\\b(?i:in)\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.expression.in.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "&&|\\|\\|",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.logical.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "\\b(?i:(not|and|or|xor|eqv|imp))\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.logical.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "=(?!=)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "\\b(?i:(greater|less|than|equal\\s+to|does|contains|ct|nct|equal|eq|neq|lt|lte|le|gt|gte|ge|is))\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.decision.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "%=|&=|\\*=|\\+=|-=|/=",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.assignment.compound.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "&",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.concat.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "<=|>=|<|>",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.relational.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "==|!=",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.comparison.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "/|%|\\*|\\+|-|\\b(?i:mod)\\b|\\^|\\\\",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.arithmetic.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "\\?:(?!:)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.elvis.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                },
                {
                    "begin": "\\?(?!\\.)|:(?!:)",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.ternary.cfml"
                        }
                    },
                    "end": "(?<=\\})|(?=[^\\s\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-cfml-scopes": {
            "patterns": [
              {
                "name": "variable.language.super.cfml",
                "match": "\\b(?i:super)\\b"
              },
              {
                "name": "variable.language.scope.cfml",
                "match": "\\b(?i:thread)\\b(?=[\\[.])"
              },
              {
                "name": "variable.language.scope.cfml",
                "match": "(?x)\n  \\b(?i:(\n  application|arguments|attributes|caller|cgi|client|cookie|flash|form|\n  local|request|server|session|this|thistag|url|variables|self|static\n))\\b"
              }
            ]
          },
        "source-cfml-script-variable": {
            "patterns": [
                {
                    "include": "#source-cfml-script-cfml-scopes"
                },
                {
                    "name": "entity.name.class.cfml",
                    "match": "[_$a-zA-Z][$\\w.]*(?=\\s*::)"
                },
                {
                    "name": "variable.other.struct.cfml",
                    "match": "[_$a-zA-Z][$\\w]*(?=\\s*[\\[\\.])"
                },
                {
                    "name": "variable.other.constant.cfml",
                    "match": "\\b[A-Z][_$\\dA-Z]*\\b"
                },
                {
                    "name": "variable.other.readwrite.cfml",
                    "match": "[_$a-zA-Z][$\\w]*"
                }
            ]
        },
        "source-cfml-script-struct-literal-function-keys": {
            "patterns": [
                {
                    "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml string.quoted.single.cfml",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.cfml"
                        }
                    },
                    "contentName": "entity.name.function.cfml",
                    "end": "(')(?!')",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml",
                            "match": "''"
                        },
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }
                    ]
                },
                {
                    "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml string.quoted.double.cfml",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.cfml"
                        }
                    },
                    "contentName": "entity.name.function.cfml",
                    "end": "(\")(?!\")",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.string.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.quote.cfml",
                            "match": "\"\""
                        },
                        {
                            "include": "#source-cfml-script-hash-delimiters"
                        }
                    ]
                },
                {
                    "name": "meta.function.declaration.cfml meta.struct-literal.key.cfml entity.name.function.cfml",
                    "match": "[_$a-zA-Z][$\\w]*"
                },
                {
                    "name": "meta.function.declaration.cfml punctuation.separator.key-value.cfml",
                    "match": "(=|:)"
                }
            ]
        },
        "source-cfml-script-tag-generic-attribute-script": {
            "patterns": [
                {
                    "name": "meta.tag.script.cfml entity.other.attribute-name.cfml",
                    "match": "\\b[a-zA-Z_][\\w:-]*\\b"
                },
                {
                    "name": "meta.tag.script.cfml",
                    "begin": "(=|:)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.separator.key-value.cfml"
                        }
                    },
                    "end": "(?=\\s*\\b([a-zA-Z_][\\w:-]*)\\s*(=|:))|(?=[;\\{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                },
                {
                    "name": "invalid.illegal.attribute-name.cfml",
                    "match": "\\S+"
                }
            ]
        },
        "source-cfml-script-tag-string-quoted-single": {
            "name": "string.quoted.single.cfml",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                }
            },
            "end": "'(?!')",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.cfml"
                }
            },
            "patterns": [
                {
                    "name": "constant.character.escape.quote.cfml",
                    "match": "''"
                },
                {
                    "include": "#source-cfml-script-hash-delimiters"
                }
            ]
        },
        "cfscript": {
            "begin": "(?i)(<)(cfscript)(\\s+|>)",
            "beginCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                },
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                },
                "2": {
                    "name": "entity.name.tag.cfml"
                },
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            },
            "contentName": "source.cfml.script",
            "end": "(?i)(</)(cfscript)(\\s*>)",
            "endCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                },
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                },
                "2": {
                    "name": "entity.name.tag.cfml"
                },
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            },
            "patterns": [
                {
                    "include": "#source-cfml-tag-comments"
                },
                {
                    "include": "#source-cfml-script"
                }
            ]
        },

        "cfinterface": {
            "begin": "(?i)(?=<cfinterface)",
            "end": "(?i)(</)(cfinterface)(\\s*>)",
            "endCaptures": {
                "0": {
                    "name": "meta.tag.cfml"
                },
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                },
                "2": {
                    "name": "entity.name.tag.cfml storage.type.interface.cfml"
                },
                "3": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            },
            "patterns": [
                {
                    "name": "meta.tag.cfml meta.interface.cfml",
                    "begin": "(?i)(<)(cfinterface)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.cfml"
                        },
                        "2": {
                            "name": "entity.name.tag.cfml storage.type.interface.cfml"
                        }
                    },
                    "end": ">",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-extends"
                        },
                        {
                            "include": "#tag-generic-attribute"
                        }
                    ]
                },
                {
                    "include": "#tags"
                }
            ]
        },
        "source-cfml-script-static-method-call": {
            "patterns": [
                {
                    "name": "meta.function-call.method.static.cfml",
                    "begin": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.function.static.cfml"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-method-call-params"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-arrow-function-declaration": {
            "patterns": [
                {
                    "name": "meta.function.declaration.cfml",
                    "begin": "(?=\\([^\\(]*?\\)\\s*=>\\s*\\{)",
                    "end": "(=>)\\s*",
                    "endCaptures": {
                        "1": {
                            "name": "storage.type.function.arrow.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-arrow-function-declaration-parameters"
                        }
                    ]
                },
                {
                    "begin": "(?=\\([^\\(]*?\\)\\s*=>)",
                    "end": "(?=[);}\\],\\n])",
                    "patterns": [
                        {
                            "name": "meta.function.declaration.cfml",
                            "begin": "(?=\\()",
                            "end": "(?=(=>))",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration-parameters"
                                }
                            ]
                        },
                        {
                            "begin": "(=>)\\s*",
                            "beginCaptures": {
                                "0": {
                                    "name": "meta.function.declaration.cfml"
                                },
                                "1": {
                                    "name": "storage.type.function.arrow.cfml"
                                }
                            },
                            "contentName": "meta.function.body.cfml",
                            "end": "(?=[);}\\],\\n])",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        }
                    ]
                }
            ]
        },"source-cfml-script-brackets": {
            "patterns": [
                {
                    "include": "#source-cfml-script-round-brackets"
                },
                {
                    "include": "#source-cfml-script-square-brackets"
                }
            ]
        },
        "tags-with-script": {
            "name": "meta.tag.cfml",
            "begin": "(?i)(<)(cfset|cfreturn)(?=\\s|/?>)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.tag.begin.cfml"
                },
                "2": {
                    "name": "entity.name.tag.cfml"
                }
            },
            "contentName": "source.cfml.script",
            "end": "(/?>)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.tag.end.cfml"
                }
            },
            "patterns": [
                {
                    "include": "#source-cfml-script"
                }
            ]
        },
        "source-cfml-script-conditional": {
            "patterns": [
                {
                    "name": "meta.switch.cfml",
                    "begin": "\\bswitch\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.switch.cfml"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-round-brackets"
                        },
                        {
                            "name": "meta.block.cfml",
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            },
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "begin": ":",
                                    "end": "(?=(\\bcase\\b|\\bdefault\\b|\\}))",
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ]
                                },
                                {
                                    "name": "keyword.control.switch.cfml",
                                    "match": "\\b(case|default)\\b"
                                },
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "meta.do-while.cfml",
                    "begin": "\\bdo\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.loop.cfml"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.group.cfml punctuation.definition.group.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "meta.block.cfml",
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            },
                            "end": "\\}",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.end.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ]
                        },
                        {
                            "name": "keyword.control.loop.cfml",
                            "match": "\\bwhile\\b"
                        },
                        {
                            "name": "meta.group.cfml",
                            "begin": "\\(",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.group.begin.cfml"
                                }
                            },
                            "end": "(?=\\))",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "meta.for.cfml",
                    "begin": "\\bfor\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.loop.cfml"
                        }
                    },
                    "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-parens-block-scope"
                        }
                    ]
                },
                {
                    "name": "meta.while.cfml",
                    "begin": "\\bwhile\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.loop.cfml"
                        }
                    },
                    "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-parens-block-scope"
                        }
                    ]
                },
                {
                    "name": "meta.conditional.cfml",
                    "begin": "\\b(else\\s+if|if)\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.conditional.cfml"
                        }
                    },
                    "end": "(?:(\\})|(?=[^\\(\\{\\}\\s]))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-parens-block-scope"
                        }
                    ]
                },
                {
                    "name": "meta.conditional.cfml",
                    "begin": "\\belse\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.conditional.cfml"
                        }
                    },
                    "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-block-scope"
                        }
                    ]
                },
                {
                    "name": "meta.try.cfml",
                    "begin": "\\btry\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.try.cfml"
                        }
                    },
                    "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-block-scope"
                        }
                    ]
                },
                {
                    "name": "meta.catch.cfml",
                    "begin": "\\b(catch)\\b\\s*((\\()\\s*(?:(any)|([_$a-zA-Z][$\\w]*))\\s+([_$a-zA-Z][$\\w]*)\\s*(\\)))",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.control.catch.cfml"
                        },
                        "2": {
                            "name": "meta.catch.parameter.cfml"
                        },
                        "3": {
                            "name": "punctuation.definition.parameters.begin.cfml"
                        },
                        "4": {
                            "name": "support.type.primitive.cfml"
                        },
                        "5": {
                            "name": "entity.name.type.cfml"
                        },
                        "6": {
                            "name": "variable.other.readwrite.cfml"
                        },
                        "7": {
                            "name": "punctuation.definition.parameters.begin.cfml"
                        }
                    },
                    "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-block-scope"
                        }
                    ]
                },
                {
                    "name": "meta.finally.cfml",
                    "begin": "\\bfinally\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.finally.cfml"
                        }
                    },
                    "end": "(?:(\\})|(?=[^\\{\\}\\s]))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-block-scope"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-parens-block-scope": {
            "patterns": [
              {
                "name": "meta.group.cfml",
                "begin": "\\(",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.group.begin.cfml"
                  }
                },
                "end": "\\)",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.group.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#source-cfml-script-expressions"
                  }
                ]
              },
              {
                "include": "#source-cfml-script-block-scope"
              }
            ]
          },
        "source-cfml-script-support-call-parameter": {
            "patterns": [
                {
                    "begin": "\\b([_$a-zA-Z][$\\w\\.]*)\\s*(=)(?!=)",
                    "captures": {
                        "1": {
                            "name": "entity.other.parameter-name.cfml"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    },
                    "end": "(?=[,\\)])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-support-call": {
            "patterns": [
              {
                "name": "meta.function-call.support.cfml meta.function-call.support.createcomponent.cfml",
                "begin": "(?i)\\b(createobject)(\\()(?=(?:\\s*type\\s*=)?\\s*[\"']component[\"']\\s*,)",
                "beginCaptures": {
                  "1": {
                    "name": "support.function.cfml"
                  },
                  "2": {
                    "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
                  }
                },
                "contentName": "meta.function-call.parameters.support.cfml",
                "end": "\\)",
                "endCaptures": {
                  "0": {
                    "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "name": "punctuation.separator.function-call.support.cfml",
                    "match": ","
                  },
                  {
                    "include": "#source-cfml-script-support-call-parameter"
                  },
                  {
                    "include": "#source-cfml-script-expressions"
                  }
                ]
              },
              {
                "name": "meta.function-call.support.cfml meta.function-call.support.createjavaobject.cfml",
                "begin": "(?i)\\b(createobject)\\s*(\\()(?=(?:\\s*type\\s*=)?\\s*[\"']java[\"']\\s*,)",
                "beginCaptures": {
                  "1": {
                    "name": "support.function.cfml"
                  },
                  "2": {
                    "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
                  }
                },
                "contentName": "meta.function-call.parameters.support.cfml",
                "end": "\\)",
                "endCaptures": {
                  "0": {
                    "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "name": "punctuation.separator.function-call.support.cfml",
                    "match": ","
                  },
                  {
                    "include": "#source-cfml-script-support-call-parameter"
                  },
                  {
                    "include": "#source-cfml-script-expressions"
                  }
                ]
              },
              {
                "name": "meta.function-call.support.cfml",
                "begin": "(?i)\\b(queryexecute)\\s*(\\()",
                "beginCaptures": {
                  "1": {
                    "name": "support.function.cfml"
                  },
                  "2": {
                    "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
                  }
                },
                "contentName": "meta.function-call.parameters.support.cfml",
                "end": "\\)",
                "endCaptures": {
                  "0": {
                    "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "begin": "(?i)(?<=queryexecute\\()",
                    "end": "(?=[,)])",
                    "patterns": [
                        {
                          "include": "#source-cfml-script-sql-string"
                        },
                        {
                          "include": "#source-cfml-script-queryexecute-parameter"
                        },
                        {
                          "include": "#source-cfml-script-support-call-parameter"
                        },
                        {
                          "include": "#source-cfml-script-expressions"
                        }
                      ]

                  },
                  {
                    "name": "punctuation.separator.function-call.support.cfml",
                    "match": ","
                  },
                  {
                    "include": "#source-cfml-script-queryexecute-parameter"
                  },
                  {
                    "include": "#source-cfml-script-support-call-parameter"
                  },
                  {
                    "include": "#source-cfml-script-expressions"
                  }
                ]
              }
            ]
          },
		  "source-cfml-script-queryexecute-parameter": {
            "patterns": [
              {
                "begin": "\\b(sql)\\s*(=)(?!=)",
                "end": "(?=[,\\)])",
                "captures": {
                  "1": {
                    "name": "entity.other.parameter-name.cfml"
                  },
                  "2": {
                    "name": "keyword.operator.assignment.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#source-cfml-script-sql-string"
                  },
                  {
                    "include": "#source-cfml-script-expressions"
                  }
                ]
              }
            ]
          },
          "cfoutput-injection": {
            "patterns": [
              {
                "name": "constant.character.escape.hash.cfml",
                "match": "##"
              },
              {
                "begin": "#",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.template-expression.begin.cfml"
                  }
                },
                "contentName": "meta.embedded.line.cfml source.cfml.script",
                "end": "#",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.template-expression.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#source-cfml-script"
                  }
                ]
              },
              {
                "include": "#tags"
              }
            ]
          },
		  "source-cfml-script-sql-string": {
            "patterns": [
              {
                "include": "#cfoutput-injection"
              },
              {
                "begin": "\"",
                "beginCaptures": {
                  "0": {
                    "name": "string.quoted.double.cfml punctuation.definition.string.begin.cfml"
                  }
                },
                "contentName": "meta.string.quoted.double.cfml meta.embedded.block.sql source.sql",
                "end": "(\")(?!\")",
                "endCaptures": {
                  "1": {
                    "name": "string.quoted.double.cfml punctuation.definition.string.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "name": "constant.character.escape.quote.cfml",
                    "match": "\"\""
                  },
                  {
                    "include": "#source-cfml-sql-string-double-quoted"
                  }
                ]
              },
              {
                "begin": "'",
                "beginCaptures": {
                  "0": {
                    "name": "string.quoted.single.cfml punctuation.definition.string.begin.cfml"
                  }
                },
                "contentName": "meta.string.quoted.single.cfml meta.embedded.block.sql source.sql",
                "end": "(')(?!')",
                "endCaptures": {
                  "1": {
                    "name": "string.quoted.single.cfml punctuation.definition.string.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "name": "constant.character.escape.quote.cfml",
                    "match": "''"
                  },
                  {
                    "include": "#source-cfml-sql-string-single-quoted"
                  }
                ]
              }
            ]
          },
          "source-cfml-sql-string-double-quoted": {
            "patterns": [
              {
                "include": "#cfoutput-injection"
              },
              {
                "name": "comment.line.double-dash.sql",
                "match": "(--)((\"\")|[^\"])*(?=\"|$)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.comment.sql"
                  },
                  "3": {
                    "name": "constant.character.escape.quote.cfml"
                  }
                }
              },
              {
                "name": "comment.block.sql",
                "begin": "/\\*",
                "end": "\\*/|(?=\"(?!\"))",
                "captures": {
                  "0": {
                    "name": "punctuation.definition.comment.sql"
                  }
                },
                "patterns": [
                  {
                    "name": "constant.character.escape.quote.cfml",
                    "match": "\"\""
                  }
                ]
              },
              {
                "match": "'(?=((\\\\')|[^'\"])*(\"|$))",
                "name": "string.quoted.single.unclosed.sql"
              },
              {
                "match": "`(?=((\\\\`)|[^`\"])*(\"|$))",
                "name": "string.quoted.other.backtick.unclosed.sql"
              },
              {
                "include": "source.sql"
              },
              {
                "name": "variable.parameter.query.named.cfml",
                "match": "(:)([_$a-zA-Z][$\\w]*)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.variable.cfml"
                  }
                }
              },
              {
                "name": "variable.parameter.query.positional.cfml punctuation.definition.variable.cfml",
                "match": "\\?"
              }
            ]
          },
          "source-cfml-sql-string-single-quoted": {
            "patterns": [
              {
                "name": "comment.line.double-dash.sql",
                "match": "(--)(('')|[^'])*(?='|$)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.comment.sql"
                  },
                  "3": {
                    "name": "constant.character.escape.quote.cfml"
                  }
                }
              },
              {
                "name": "comment.block.sql",
                "begin": "/\\*",
                "end": "\\*/|(?='(?!'))",
                "captures": {
                  "0": {
                    "name": "punctuation.definition.comment.sql"
                  }
                },
                "patterns": [
                  {
                    "name": "constant.character.escape.quote.cfml",
                    "match": "''"
                  }
                ]
              },
              {
                "name": "string.quoted.single.sql",
                "begin": "''",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.string.begin.sql constant.character.escape.quote.cfml"
                  }
                },
                "end": "''",
                "endCaptures": {
                  "0": {
                    "name": "punctuation.definition.string.end.sql constant.character.escape.quote.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#cfoutput-injection"
                  },
                  {
                    "include": "#source-sql-string_escape"
                  }
                ]
              },
              {
                "match": "`(?=((\\\\`)|[^`'])*('|$))",
                "name": "string.quoted.other.backtick.unclosed.sql"
              },
              {
                "match": "\"(?=((\\\\\")|[^\"'])*('|$))",
                "name": "string.quoted.double.unclosed.sql"
              },
              {
                "include": "source.sql"
              },
              {
                "name": "variable.parameter.query.named.cfml",
                "match": "(:)([_$a-zA-Z][$\\w]*)",
                "captures": {
                  "1": {
                    "name": "punctuation.definition.variable.cfml"
                  }
                }
              },
              {
                "name": "variable.parameter.query.positional.cfml punctuation.definition.variable.cfml",
                "match": "\\?"
              }
            ]
          },
          "source-sql-string_escape": {
            "name": "constant.character.escape.sql",
            "match": "\\\\."
          },



        "source-cfml-script-number": {
            "name": "constant.numeric.cfml",
            "match": "(?xi)(?:\\B[-+])?(?:\\b0x[0-9a-f]*|(\\B\\.[0-9]+|\\b[0-9]+(\\.[0-9]*)?))"
        },
        "source-cfml-script-arrow-function-declaration-parameters": {
            "name": "meta.function.parameters.cfml",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.begin.cfml"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.cfml"
                }
            },
            "patterns": [
                {
                    "include": "#source-cfml-script-function-parameter"
                }
            ]
        },
        "source-cfml-script-tag-in-script": {
            "patterns": [
                {
                    "name": "meta.tag.script.cfml meta.tag.property.cfml",
                    "begin": "(?i)\\b(property)(?!\\s+in\\b)(?:\\s+(any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml|[_$a-zA-Z][$\\w.]*))?\\s+([_$a-zA-Z][$\\w]*\\b)(?!\\s*=)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        },
                        "2": {
                            "name": "support.type.cfml"
                        },
                        "3": {
                            "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                        }
                    },
                    "end": "(?=(;|{))",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute"
                        }
                    ]
                },
                {
                    "name": "meta.tag.script.cfml meta.tag.property.cfml",
                    "begin": "(?i)\\b(property)(?!\\s+in\\b)(?=(\\s+[a-zA-Z]|\\s*$|\\s*[{;]))",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }
                    },
                    "end": "(?=(;|{))",
                    "patterns": [
                        {
                            "match": "(?i)\\b(name|type|required|default|displayname|hint|fieldtype|ormType|column|generator|sequence|selectkey|params|length|precision|index|setter|getter|source|elementcolumn|elementtype|structkeytype|structkeycolumn|inversejoincolumn|linkschema|linkcatalog|linktable|missingRowIgnored|inverse|orderby|fkcolumn|fetch|cascade|constrained|unique|uniquekey|notnull|update|insert|generated|formula|lazy|optimisticLock|scale|mappedby|cfc|joinColumn|validate|validateParams|cacheUse|sqlType|dbDefault|where|persistent|unSavedValue|serializable|singularname|remotingFetch|table)\\s*(=)\\s*(?:((\")([^<>\"']*)(\"))|((')([^<>\"']*)('))|([^<>\"'\\s]*))",
                            "captures": {
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                },
                                "2": {
                                    "name": "punctuation.separator.key-value.cfml"
                                },
                                "3": {
                                    "name": "string.quoted.double.cfml"
                                },
                                "4": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                },
                                "5": {
                                    "name": "meta.tag.property.name.cfml"
                                },
                                "6": {
                                    "name": "punctuation.definition.string.end.cfml"
                                },
                                "7": {
                                    "name": "string.quoted.single.cfml"
                                },
                                "8": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                },
                                "9": {
                                    "name": "meta.tag.property.name.cfml"
                                },
                                "10": {
                                    "name": "punctuation.definition.string.end.cfml"
                                },
                                "11": {
                                    "name": "string.unquoted.cfml meta.tag.property.name.cfml"
                                }
                            }
                        },
                        {
                            "match": "(?x)(?i)\n  \\b(type)\\s*(=)\\s*((\")(\n  (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml) # primitive\n  |\n  ([_$a-zA-Z][$\\w.]*) #component/object (may need additional tokens)\n)(?:(\\[)(\\]))?(\"))",
                            "captures": {
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                },
                                "2": {
                                    "name": "punctuation.separator.key-value.cfml"
                                },
                                "3": {
                                    "name": "string.quoted.double.cfml"
                                },
                                "4": {
                                    "name": "punctuation.definition.string.begin.cfml"
                                },
                                "5": {
                                    "name": "storage.type.cfml"
                                },
                                "6": {
                                    "name": "support.type.primitive.cfml"
                                },
                                "7": {
                                    "name": "entity.name.type.object.cfml"
                                },
                                "8": {
                                    "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                                },
                                "9": {
                                    "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                                },
                                "10": {
                                    "name": "punctuation.definition.string.end.cfml"
                                }
                            }
                        },
                        {
                            "include": "#source-cfml-script-tag-generic-attribute"
                        }
                    ]
                },
                {
                    "name": "meta.tag.script.cfml",
                    "begin": "(?i)\\b(param)(?!\\s+in\\b)(?=\\s+(name|default|max|maxLength|min|pattern|type)\\s*=)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }
                    },
                    "end": "(?=[;{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ]
                },
                {
                    "name": "meta.tag.script.cfml",
                    "begin": "(?i)\\b(param)(?!\\s+in\\b)\\s+([_$a-zA-Z][$\\w\\.]*)(?=\\s+(name|default|max|maxLength|min|pattern|type))",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        },
                        "2": {
                            "name": "string.unquoted.cfml"
                        }
                    },
                    "end": "(?=[;{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ]
                },
                {
                    "name": "meta.tag.script.cfml",
                    "begin": "(?i)\\b(param)(?!\\s+in\\b)(?:\\s+([_$a-zA-Z][$\\w]*))?\\s+([_$a-zA-Z][$\\w\\.]*\\b)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        },
                        "2": {
                            "name": "storage.type.cfml"
                        },
                        "3": {
                            "name": "string.unquoted.cfml"
                        }
                    },
                    "end": "(?=[;{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ]
                },
                {
                    "name": "meta.tag.script.cfml",
                    "begin": "(?i)\\b(param)(?!\\s+in\\b)(?=(\\s+[a-zA-Z]|\\s*[{;]|\\s*$))",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        }
                    },
                    "end": "(?=[;{])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ]
                },
                {
                    "begin": "(?x)\\b\n(?i:\n  (ajaximport|ajaxproxy|applet|application|argument|associate|break|cache|calendar\n  |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo\n  |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar\n  |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask\n  |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn\n  |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image\n  |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout\n  |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart\n  |map|mapitem|mediaplayer|menu|menuitem|messagebox|module|ntauthenticate|oauth|object\n  |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop\n  |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult\n  |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule\n  |search|select|setting|sharepoint|silent|slider|spreadsheet|sprydataset|storedproc\n  |table|textarea|textinput|thread|throw|timer|tooltip|trace|transaction|tree|treeitem|try\n  |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)\n)(?=\\s+[a-zA-Z0-9:-]+\\s*(?:[=;{]|$)|\\s*(?:\\{|$))",
                    "beginCaptures": {
                        "1": {
                            "name": "meta.tag.script.cfml entity.name.tag.script.cfml"
                        }
                    },
                    "end": "(\\})|(?=;)",
                    "endCaptures": {
                        "1": {
                            "name": "meta.block.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "meta.tag.script.cfml",
                            "match": "\\s+"
                        },
                        {
                            "include": "#source-cfml-script-block-scope"
                        },
                        {
                            "include": "#source-cfml-script-tag-generic-attribute-script"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-method-call": {
            "patterns": [
              {
                "include": "#source-cfml-script-support-method-call"
              },
              {
                "name": "meta.function-call.method.cfml",
                "begin": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()",
                "beginCaptures": {
                  "1": {
                    "name": "entity.name.function.cfml"
                  }
                },
                "end": "\\)",
                "endCaptures": {
                  "0": {
                    "name": "meta.function-call.parameters.method.cfml punctuation.definition.arguments.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "include": "#source-cfml-script-method-call-params"
                  }
                ]
              }
            ]
          },
        "source-cfml-script-method-call-params": {
            "name": "meta.function-call.parameters.method.cfml",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.arguments.begin.cfml"
                }
            },
            "end": "(?=\\))",
            "patterns": [
                {
                    "name": "punctuation.separator.function-call.method.cfml",
                    "match": ","
                },
                {
                    "begin": "\\b(?i:(argumentCollection)|([_$a-zA-Z][$\\w]*))\\s*(=)(?!=)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.argumentCollection.cfml"
                        },
                        "2": {
                            "name": "entity.other.parameter-name.cfml"
                        },
                        "3": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    },
                    "end": "(?=[,\\)])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                },
                {
                    "include": "#source-cfml-script-expressions"
                }
            ]
        },
        "source-cfml-script-support-method-call": {
            "name": "meta.function-call.method.support.cfml",
            "begin": "(?x)\n(?i:\n  (add|addautofilter|addborder|addcolumn|addfreezepane|addimage|addinfo|addpagebreaks|addrow|addrows|addsplitpane|append|avg|binarydecode|binaryenecode|blur|booleanformat|canonicalize|charsetdecode|charsetencode|childpos|cjustify|clear|clearrect|columnarray|columncount|columndata|columnexists\n  |columnlist|compare|comparenocase|contains|containsnocase|convert|convertforgrid|copy|count|createodbcdate|createodbcdatetime|createodbctime|createsheet|crop|currentrow|dateformat|datepart|datetimeformat|day|dayofweek\n  |dayofyear|daysinmonth|daysinyear|decodeforhtml|decodefromurl|decrypt|delete|deleteat|deletecolumn|deletecolumns|deletenocase|deleterow|deleterows|diff|drawarc|drawbeveledrect|drawcubiccurve|drawline\n  |drawlines|drawoval|drawpoint|drawquadraticcurve|drawrect|drawroundrect|drawtext|each|elemnew|encodeforcss|encodeforhtml|encodeforhtmlattribute|encodeforjavascript|encodeforurl|encodeforxml|encodeforxmlattribute|encodeforxpath|encrypt|every|filter|find|findall\n  |findallnocase|findkey|findnocase|findoneof|findvalue|first|firstdayofmonth|flip|formatbasen|formatcell|formatcellrange|formatcolumn|formatcolumns|formatrow|formatrows|generatesecretkey|get|getblob|getbufferedimage|getcell\n  |getcellcomment|getcellformula|getcellvalue|getcolumncount|getexifmetadata|getexiftag|getheight|getiptcmetadata|getiptctag|getmetadata|getnodetype|getresult|getrow|getsafehtml|gettoken|getwidth|grayscale|hash|hour|htmlcodeformat|htmleditformat|indexexists|info|insert|insertat|isdefined|isempty|issafehtml|jssstringformat|keyarray\n  |keyexists|keylist|keytranslate|last|lcase|left|len|listappend|listavg|listchangedelims|listcompact|listcontains\n  |listcontainsnocase|listdeleteat|listeach|listevery|listfilter|listfind|listfindnocase|listfirst|listgetat\n  |listindexexists|listinsertat|listitemtrim|listlast|listlen|listmap|listprepend|listqualify|listreduce\n  |listremoveduplicates|listrest|listsetat|listsome|listsort|listtoarray|listvaluecount|listvaluecountnocase\n  |ljustify|lsdateformat|lsdayofweek|lsiscurrency|lsisdate|lsisnumeric|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber|lstimeformat|ltrim|map|max|median|merge|mergecells|mid|min|minute|month|negative|overlay|paragraphformat|part|parsedatetime|paste|prepend\n  |quarter|readbinary|recordcount|reduce|refind|refindnocase|rematch|rematchnocase|removechars|removesheet|repeatstring|replace|replacelist|replacelistnocase|replacenocase\n  |rereplace|rereplacenocase|resize|reverse|right|rjustify|rotate|rotatedrawingaxis|rowdata|rtrim|scaletofit|search|second|set|setactivesheet|setactivesheetnumber|setantialiasing|setbackgroundcolor|setcell\n  |setcellcomment|setcellformula|setcellvalue|setcolumnwidth|setday|setdrawingcolor|setdrawingstroke|setdrawingtransparency|setfooter|setheader|sethour|setmetadata|setminute|setmonth|setrowheight|setsecond|setyear|sharpen|shear|sheardrawingaxis|shiftcolumns|shiftrows|slice|some|sort|spanexcluding|spanincluding|stripcr|sum|swap|timeformat|tobase64|tobinary|tolist|tosorted|tostring|tostruct|transform|translate\n  |translatedrawingaxis|trim|ucase|update|urldecode|urlencodedformat|val|valuearray|week|wrap|write|writebase64|xmlformat|xordrawingmode|year|yesnoformat)\n)\\s*(\\()",
            "beginCaptures": {
                "1": {
                    "name": "support.function.member.cfml"
                },
                "2": {
                    "name": "meta.function-call.parameters.method.support.cfml punctuation.definition.arguments.begin.cfml"
                }
            },
            "contentName": "meta.function-call.parameters.method.support.cfml",
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.function-call.parameters.method.support.cfml punctuation.definition.arguments.end.cfml"
                }
            },
            "patterns": [
                {
                    "name": "punctuation.separator.function-call.method.support.cfml",
                    "match": ","
                },
                {
                    "begin": "\\b([_$a-zA-Z][$\\w\\.]*)\\s*(=)(?!=)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.parameter-name.cfml"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    },
                    "end": "(?=[,\\)])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                },
                {
                    "include": "#source-cfml-script-expressions"
                }
            ]
        },
        "source-cfml-script-function-parameter": {
            "patterns": [
                {
                    "name": "punctuation.separator.function.cfml",
                    "match": ","
                },
                {
                    "name": "keyword.other.required.argument.cfml",
                    "match": "(?i:required)"
                },
                {
                    "begin": "(?:(?:(any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|xml)|([_$a-zA-Z][$\\w.]*))(?:(\\[)(\\]))?\\s+)?([_$a-zA-Z][$\\w]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "support.type.primitive.cfml"
                        },
                        "2": {
                            "name": "entity.name.type.cfml"
                        },
                        "3": {
                            "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                        },
                        "4": {
                            "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                        },
                        "5": {
                            "name": "variable.parameter.function.cfml"
                        }
                    },
                    "end": "(?=[,)])",
                    "patterns": [
                        {
                            "begin": "(?=[_$a-zA-Z][$\\w]*)",
                            "end": "(?=[,)])",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-tag-generic-attribute"
                                }
                            ]
                        },
                        {
                            "comment": "This does not correctly capture scopes or functions",
                            "name": "meta.parameter.optional.cfml",
                            "begin": "(=)\\s*(?i:(\\btrue\\b)|(\\bfalse\\b)|(\\bnull\\b)|([_$a-zA-Z][$\\w]*))?",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                },
                                "2": {
                                    "name": "constant.language.boolean.true.cfml"
                                },
                                "3": {
                                    "name": "constant.language.boolean.false.cfml"
                                },
                                "4": {
                                    "name": "constant.language.null.cfml"
                                },
                                "5": {
                                    "name": "variable.other.readwrite.cfml"
                                }
                            },
                            "end": "(?=([_$a-zA-Z][$\\w]*|[,)]))",
                            "patterns": [
                                {
                                    "begin": "(?=\\s*([+\\-*/&%])\\s*[_$a-zA-Z][$\\w]*)",
                                    "end": "[_$a-zA-Z][$\\w]*",
                                    "endCaptures": {
                                        "0": {
                                            "name": "variable.other.readwrite.cfml"
                                        }
                                    },
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-operators"
                                        }
                                    ]
                                },
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        }
                    ]
                },
                {
                    "include": "#source-cfml-script-comments"
                }
            ]
        },
        "source-cfml-script-block-scope": {
            "name": "meta.block.cfml",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.begin.cfml"
                }
            },
            "end": "(?=\\})",
            "patterns": [
                {
                    "include": "#source-cfml-script-statements"
                }
            ]
        },
        "source-cfml-script-punctuation": {
            "patterns": [
                {
                    "begin": "\\?\\.|\\.",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.accessor.cfml"
                        }
                    },
                    "end": "(?<=\\))|(?=\\n)|(\\})|(;)|(?:([A-Z][_$\\dA-Z]*)|([$\\w]+))(?=\\n|[^$\\w])(?!(\\s*\\(|\\s*=\\s*(function\\b|\\([^\\(]*?\\)\\s*=>)))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.cfml"
                        },
                        "3": {
                            "name": "meta.property.constant.cfml variable.other.property.cfml"
                        },
                        "4": {
                            "name": "meta.property.cfml variable.other.property.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(function\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))",
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "name": "meta.function.body.cfml",
                                    "begin": "\\{",
                                    "beginCaptures": {
                                        "0": {
                                            "name": "punctuation.definition.block.begin.cfml"
                                        }
                                    },
                                    "end": "(?=\\})",
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ]
                                },
                                {
                                    "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                                    "captures": {
                                        "0": {
                                            "name": "meta.function.declaration.cfml"
                                        },
                                        "1": {
                                            "name": "meta.property.cfml entity.name.function.cfml"
                                        },
                                        "2": {
                                            "name": "keyword.operator.assignment.cfml"
                                        }
                                    }
                                },
                                {
                                    "include": "#source-cfml-script-function-declaration"
                                },
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }
                            ]
                        },
                        {
                            "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)",
                            "end": "(?=[);}\\],\\n])",
                            "patterns": [
                                {
                                    "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                                    "captures": {
                                        "0": {
                                            "name": "meta.function.declaration.cfml"
                                        },
                                        "1": {
                                            "name": "meta.property.cfml entity.name.function.cfml"
                                        },
                                        "2": {
                                            "name": "keyword.operator.assignment.cfml"
                                        }
                                    }
                                },
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }
                            ]
                        },
                        {
                            "include": "#source-cfml-script-method-call"
                        }
                    ]
                },
                {
                    "begin": "::",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.accessor.static.cfml"
                        }
                    },
                    "end": "(?<=\\))|(?=\\n)|(\\})|(;)|(?:([A-Z][_$\\dA-Z]*)|([_$a-zA-Z][$\\w]*))(?=\\n|[^$\\w])(?!(\\s*\\(|\\s*=\\s*(function\\b|\\([^\\(]*?\\)\\s*=>)))",
                    "endCaptures": {
                        "1": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.cfml"
                        },
                        "3": {
                            "name": "meta.property.constant.cfml"
                        },
                        "4": {
                            "name": "meta.property.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(function\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))",
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "name": "meta.function.body.cfml",
                                    "begin": "\\{",
                                    "beginCaptures": {
                                        "0": {
                                            "name": "punctuation.definition.block.begin.cfml"
                                        }
                                    },
                                    "end": "(?=\\})",
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ]
                                },
                                {
                                    "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                                    "captures": {
                                        "0": {
                                            "name": "meta.function.declaration.cfml"
                                        },
                                        "1": {
                                            "name": "meta.property.cfml entity.name.function.cfml"
                                        },
                                        "2": {
                                            "name": "keyword.operator.assignment.cfml"
                                        }
                                    }
                                },
                                {
                                    "include": "#source-cfml-script-function-declaration"
                                },
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }
                            ]
                        },
                        {
                            "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)",
                            "end": "(?=[);}\\],\\n])",
                            "patterns": [
                                {
                                    "match": "([_$a-zA-Z][$\\w]*)\\s*(=)\\s*",
                                    "captures": {
                                        "0": {
                                            "name": "meta.function.declaration.cfml"
                                        },
                                        "1": {
                                            "name": "meta.property.cfml entity.name.function.cfml"
                                        },
                                        "2": {
                                            "name": "keyword.operator.assignment.cfml"
                                        }
                                    }
                                },
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                }
                            ]
                        },
                        {
                            "include": "#source-cfml-script-static-method-call"
                        }
                    ]
                },
                {
                    "name": "punctuation.terminator.statement.cfml",
                    "match": "\\;"
                },
                {
                    "name": "meta.delimiter.comma.cfml",
                    "match": ","
                }
            ]
        },
        "source-cfml-script-tag-string": {
            "patterns": [
                {
                    "include": "#source-cfml-script-tag-string-quoted-single"
                },
                {
                    "include": "#source-cfml-script-string-quoted-double"
                }
            ]
        },
        "source-cfml-script-tag-in-script-cf": {
            "patterns": [
                {
                    "begin": "(?x)(?i)\n  ((cf\n  (?:ajaximport|ajaxproxy|application|argument|associate|break|cache\n  |chart|chartdata|chartseries|client|clientsettings|col|collection|content|cookie|dbinfo\n  |directory|div|document|documentitem|documentsection|dump|error|exchangecalendar\n  |exchangeconnection|exchangecontact|exchangefilter|exchangemail|exchangetask\n  |execute|feed|file|fileupload|flush|form|formgroup|formitem|ftp|grid|gridcolumn\n  |gridrow|gridupdate|header|htmlhead|htmltopdf|htmltopdfitem|http|httpparam|image\n  |imap|imapfilter|import|include|index|input|insert|invoke|invokeargument|layout\n  |layoutarea|ldap|location|lock|log|login|loginuser|logout|loop|mail|mailparam|mailpart\n  |map|mapitem|menuitem|messagebox|module|ntauthenticate|oauth|object\n  |objectcache|output|param|pdf|pdfform|pdfformparam|pdfparam|pdfsubform|pod|pop\n  |presentation|presentationslide|presenter|print|processingdirective|procparam|procresult\n  |progressbar|property|query|queryparam|registry|report|reportparam|savecontent|schedule\n  |search|select|setting|sharepoint|silent|slider|spreadsheet|storedproc\n  |textarea|thread|throw|timer|tooltip|trace|transaction|treeitem|try\n  |update|video|videoplayer|videoplayerparam|wddx|websocket|window|xml|zip|zipparam)\n)|(cf(?:applet|calendar|mediaplayer|menu|sprydataset|table|textinput|tree)))\\(",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.name.tag.script.cfml"
                        },
                        "3": {
                            "name": "invalid.deprecated.tag.script.cfml"
                        }
                    },
                    "end": "\\)",
                    "patterns": [
                        {
                            "match": "\\b([a-zA-Z_][\\w:-]*)\\b",
                            "captures": {
                                "1": {
                                    "name": "entity.other.attribute-name.cfml"
                                }
                            }
                        },
                        {
                            "begin": "(=|:)",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.separator.key-value.cfml"
                                }
                            },
                            "end": "(?=\\s*\\b([a-zA-Z_][\\w:-]*)\\s*=)|(?=\\))",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        },
                        {
                            "name": "invalid.illegal.attribute-name.cfml",
                            "match": "\\S+"
                        }
                    ],
                    "name": "meta.tag.script.cf.cfml"
                }
            ]
        },
        "source-cfml-script-call": {
            "patterns": [
                {
                    "name": "meta.function-call.support.cfml meta.function-call.support.typed-arraynew.cfml",
                    "begin": "(?i)(?=\\barraynew\\s*\\[)",
                    "end": "(?<=\\))",
                    "patterns": [
                        {
                            "begin": "(?i)\\b(arraynew)\\s*(\\[)",
                            "beginCaptures": {
                                "1": {
                                    "name": "support.function.cfml"
                                },
                                "2": {
                                    "name": "meta.brackets.cfml meta.type.parameters.cfml punctuation.definition.brackets.begin.cfml"
                                }
                            },
                            "contentName": "meta.brackets.cfml meta.type.parameters.cfml",
                            "end": "\\]",
                            "endCaptures": {
                                "0": {
                                    "name": "meta.brackets.cfml meta.type.parameters.cfml punctuation.definition.brackets.end.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        },
                        {
                            "begin": "(?<=\\])\\s*(\\()",
                            "beginCaptures": {
                                "1": {
                                    "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.begin.cfml"
                                }
                            },
                            "contentName": "meta.function-call.parameters.support.cfml",
                            "end": "\\)",
                            "endCaptures": {
                                "0": {
                                    "name": "meta.function-call.parameters.support.cfml punctuation.definition.arguments.end.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "name": "punctuation.separator.function-call.support.cfml",
                                    "match": ","
                                },
                                {
                                    "include": "#source-cfml-script-support-call-parameter"
                                },
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=\\b[_$a-zA-Z][$\\w]*\\s*\\()",
                    "end": "(?<=\\))",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-support-call"
                        },
                        {
                            "captures": {
                                "1": {
                                    "name": "meta.function-call.cfml entity.name.function.cfml"
                                }
                            },
                            "match": "([_$a-zA-Z][$\\w]*)\\s*(?=\\()"
                        },
                        {
                            "include": "#source-cfml-script-function-call-params"
                        }
                    ]
                },
                {
                    "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.\\s*[_$a-zA-Z][$\\w]*\\s*\\()",
                    "end": "(?<=\\))",
                    "patterns": [
                        {
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
                            "end": "\\?\\.|\\.",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.accessor.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-cfml-scopes"
                                },
                                {
                                    "name": "variable.other.object.cfml",
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ]
                        },
                        {
                            "name": "keyword.other.accessor.cfml",
                            "match": "\\.|\\?\\."
                        },
                        {
                            "include": "#source-cfml-script-method-call"
                        }
                    ]
                },
                {
                    "begin": "(?=[_$a-zA-Z][$\\w.]*\\s*::\\s*[_$a-zA-Z][$\\w]*\\s*\\()",
                    "end": "(?<=\\))",
                    "patterns": [
                        {
                            "begin": "(?=[_$a-zA-Z][$\\w.]*\\s*::)",
                            "end": "::",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.accessor.static.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "name": "entity.name.class.cfml",
                                    "match": "[_$a-zA-Z][$\\w.]*"
                                }
                            ]
                        },
                        {
                            "include": "#source-cfml-script-static-method-call"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-square-brackets": {
            "patterns": [
                {
                    "name": "meta.brackets.cfml",
                    "begin": "(?<=[$\\w\\)\\]])\\s*(\\[)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.brackets.begin.cfml"
                        }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.brackets.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "punctuation.separator.slice.cfml",
                            "match": ":"
                        },
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                },
                {
                    "name": "meta.array-literal.cfml",
                    "begin": "\\[",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.brackets.begin.cfml"
                        }
                    },
                    "end": "\\]",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.brackets.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "punctuation.separator.array-literal.cfml",
                            "match": ","
                        },
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-function-call-params": {
            "name": "meta.function-call.cfml meta.function-call.parameters.cfml",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.arguments.begin.cfml"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.arguments.end.cfml"
                }
            },
            "patterns": [
                {
                    "name": "punctuation.separator.function-call.cfml",
                    "match": ","
                },
                {
                    "begin": "\\b([_$a-zA-Z][$\\w]*)\\s*(=)(?!=)",
                    "beginCaptures": {
                        "1": {
                            "name": "entity.other.parameter-name.cfml"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.cfml"
                        }
                    },
                    "end": "(?=[,\\)])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                },
                {
                    "include": "#source-cfml-script-expressions"
                }
            ]
        },
        "source-cfml-script-string": {
            "patterns": [
                {
                    "include": "#source-cfml-script-string-quoted-single"
                },
                {
                    "include": "#source-cfml-script-string-quoted-double"
                }
            ]
        },
        "source-cfml-script-comments": {
            "patterns": [
                {
                    "name": "comment.block.documentation.cfml",
                    "begin": "(/\\*\\*)\\s*$",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "begin": "^\\s*\\*?\\s*((@)\\S*)\\b",
                            "beginCaptures": {
                                "1": {
                                    "name": "keyword.other.documentation.cfml"
                                },
                                "2": {
                                    "name": "punctuation.definition.keyword.cfml"
                                }
                            },
                            "end": "(\\n|(?=\\*/))"
                        },
                        {
                            "begin": "^\\s*(\\*(?!/))?\\s*(?=\\w)",
                            "end": "(\\n|(?=\\*/))"
                        }
                    ]
                },
                {
                    "name": "comment.block.cfml",
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    }
                },
                {
                    "name": "comment.line.double-slash.cfml",
                    "begin": "//",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.cfml"
                        }
                    },
                    "end": "\\n"
                },
                {
                    "include": "#source-cfml-tag-comments"
                }
            ]
        },
        "source-cfml-script-function-declaration-parameters": {
            "patterns": [
                {
                    "name": "meta.function.declaration.cfml meta.function.parameters.cfml",
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.begin.cfml"
                        }
                    },
                    "end": "(?=\\))",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-function-parameter"
                        }
                    ]
                },
                {
                    "name": "meta.function.declaration.cfml",
                    "begin": "\\)",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.function.parameters.cfml punctuation.definition.parameters.end.cfml"
                        }
                    },
                    "end": "(?=(\\{|;|=>))",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-tag-generic-attribute"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-anonymous-function": {
            "patterns": [
                {
                    "begin": "(?=(\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))",
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "meta.function.body.cfml",
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            },
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ]
                        },
                        {
                            "match": "\\b(function)\\b\\s*",
                            "captures": {
                                "0": {
                                    "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                                },
                                "1": {
                                    "name": "storage.type.function.cfml"
                                }
                            }
                        },
                        {
                            "match": "\\s*(=>)\\s*",
                            "captures": {
                                "0": {
                                    "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                                },
                                "1": {
                                    "name": "storage.type.function.arrow.cfml"
                                }
                            }
                        },
                        {
                            "name": "meta.function.anonymous.cfml meta.function.declaration.cfml entity.name.function.cfml",
                            "match": "[_$a-zA-Z][$\\w]*"
                        },
                        {
                            "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml",
                            "begin": "\\(",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.parameters.begin.cfml"
                                }
                            },
                            "end": "(?=\\))",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-function-parameter"
                                }
                            ]
                        },
                        {
                            "name": "meta.function.anonymous.cfml meta.function.declaration.cfml",
                            "begin": "\\)",
                            "beginCaptures": {
                                "0": {
                                    "name": "meta.function.parameters.cfml punctuation.definition.parameters.end.cfml"
                                }
                            },
                            "end": "(?=(\\{|=>))",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-tag-generic-attribute"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=\\s*\\([^\\(]*?\\)\\s*=>)",
                    "end": "(?=[);}\\],\\n])",
                    "patterns": [
                        {
                            "begin": "\\s*(=>)\\s*",
                            "beginCaptures": {
                                "0": {
                                    "name": "meta.function.anonymous.cfml meta.function.declaration.cfml"
                                },
                                "1": {
                                    "name": "storage.type.function.arrow.cfml"
                                }
                            },
                            "contentName": "meta.function.body.cfml",
                            "end": "(?=[);}\\],\\n])",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-expressions"
                                }
                            ]
                        },
                        {
                            "name": "meta.function.anonymous.cfml meta.function.declaration.cfml meta.function.parameters.cfml",
                            "begin": "\\(",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.parameters.begin.cfml"
                                }
                            },
                            "end": "\\)",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.parameters.end.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-function-parameter"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-struct-literal": {
            "name": "meta.struct-literal.cfml",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.begin.cfml"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.end.cfml"
                }
            },
            "patterns": [
                {
                    "include": "#source-cfml-script-comments"
                },
                {
                    "begin": "(?=(\\'[^']*\\'|\\\"[^\"]*\\\"|[_$a-zA-Z][$\\w]*)\\s*(:|=)\\s*(\\bfunction\\b|\\([^\\(]*?\\)\\s*=>\\s*\\{))",
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal-function-keys"
                        },
                        {
                            "begin": "(?=\\s*\\bfunction\\b)",
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-function-declaration"
                                },
                                {
                                    "name": "meta.function.body.cfml",
                                    "begin": "\\{",
                                    "beginCaptures": {
                                        "0": {
                                            "name": "punctuation.definition.block.begin.cfml"
                                        }
                                    },
                                    "end": "(?=\\})",
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "begin": "(?=\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{)",
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-arrow-function-declaration"
                                },
                                {
                                    "name": "meta.function.body.cfml",
                                    "begin": "\\{",
                                    "beginCaptures": {
                                        "0": {
                                            "name": "punctuation.definition.block.begin.cfml"
                                        }
                                    },
                                    "end": "(?=\\})",
                                    "patterns": [
                                        {
                                            "include": "#source-cfml-script-statements"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=(\\'[^']*\\'|\\\"[^\"]*\\\"|[_$a-zA-Z][$\\w]*)\\s*(:|=)\\s*\\([^\\(]*?\\)\\s*=>)",
                    "end": "(?=[);}\\],\\n])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-struct-literal-function-keys"
                        },
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        }
                    ]
                },
                {
                    "name": "meta.struct-literal.key.cfml",
                    "begin": "(?=\"|')",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-string"
                        }
                    ],
                    "end": "(?<=\"|')"
                },
                {
                    "name": "meta.struct-literal.key.cfml",
                    "match": "[_$a-zA-Z][$\\w]*"
                },
                {
                    "begin": "(:|=)\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.key-value.cfml"
                        }
                    },
                    "end": "(,)|(?=\\})",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.separator.struct-literal.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-expressions"
                        }
                    ]
                },
                {
                    "name": "punctuation.separator.struct-literal.cfml",
                    "match": ","
                }
            ]
        },
        "source-cfml-script-named-function": {
            "patterns": [
                {
                    "begin": "(?x)\n(?:\n  (?:\n    (?i:\\b(private|package|public|remote|static|final|abstract|default)\\s+)?\n    (?i:\\b(private|package|public|remote|static|final|abstract|default)\\s+)?\n    ((?i:\\b\n      (any|array|binary|boolean|component|date|function|guid|numeric|query|string|struct|uuid|variablename|void|xml)\\s+\n      |\n      ([A-Za-z0-9_.$]+)\\s+\n      |\n      ([A-Za-z0-9_.$]+)(?:(\\[)(\\]))?\\s+\n    ))?\n  )\n)\n(?i:(function))\n\\s+\n(?:\n  (init)\n  |\n  ([_$a-zA-Z][$\\w]*)\n)\\b",
                    "beginCaptures": {
                        "0": {
                            "name": "meta.function.declaration.cfml"
                        },
                        "1": {
                            "name": "storage.modifier.cfml"
                        },
                        "2": {
                            "name": "storage.modifier.cfml"
                        },
                        "3": {
                            "name": "meta.function.return-type.cfml"
                        },
                        "4": {
                            "name": "support.type.primitive.cfml"
                        },
                        "5": {
                            "name": "entity.name.type.object.cfml"
                        },
                        "6": {
                            "name": "entity.name.type.object.array.cfml"
                        },
                        "7": {
                            "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.begin.cfml"
                        },
                        "8": {
                            "name": "meta.type.array.cfml meta.brackets.cfml punctuation.definition.brackets.end.cfml"
                        },
                        "9": {
                            "name": "storage.type.function.cfml"
                        },
                        "10": {
                            "name": "entity.name.function.constructor.cfml"
                        },
                        "11": {
                            "name": "entity.name.function.cfml"
                        }
                    },
                    "end": "\\}|(?=;)",
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-function-declaration-parameters"
                        },
                        {
                            "name": "meta.function.body.cfml",
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            },
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=(([_$a-zA-Z][$\\w]*)\\s*(\\.)\\s*)+([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))",
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "meta.function.body.cfml",
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            },
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ]
                        },
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        },
                        {
                            "include": "#source-cfml-script-function-declaration"
                        },
                        {
                            "name": "meta.function.declaration.cfml",
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
                            "end": "\\?\\.|\\.",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.accessor.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-cfml-scopes"
                                },
                                {
                                    "name": "support.class.cfml",
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ]
                        },
                        {
                            "name": "meta.function.declaration.cfml",
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
                            "end": "\\s*(=)\\s*",
                            "endCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "name": "meta.property.cfml entity.name.function.cfml",
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=(([_$a-zA-Z][$\\w]*)\\s*(\\.)\\s*)+([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)",
                    "end": "(?=[);}\\],\\n])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        },
                        {
                            "name": "meta.function.declaration.cfml",
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*\\.)",
                            "end": "\\?\\.|\\.",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.accessor.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-cfml-scopes"
                                },
                                {
                                    "name": "support.class.cfml",
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ]
                        },
                        {
                            "name": "meta.function.declaration.cfml",
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
                            "end": "\\s*(=)\\s*",
                            "endCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "name": "meta.property.cfml entity.name.function.cfml",
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*(\\s*\\bfunction\\b|\\s*\\([^\\(]*?\\)\\s*=>\\s*\\{))",
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "meta.function.body.cfml",
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            },
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ]
                        },
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        },
                        {
                            "include": "#source-cfml-script-function-declaration"
                        },
                        {
                            "name": "meta.function.declaration.cfml",
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
                            "end": "\\s*(=)\\s*",
                            "endCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "name": "variable.other.constant.cfml entity.name.function.cfml",
                                    "match": "[A-Z][_$\\dA-Z]*"
                                },
                                {
                                    "name": "variable.other.readwrite.cfml entity.name.function.cfml",
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=([_$a-zA-Z][$\\w]*)\\s*(=)\\s*\\([^\\(]*?\\)\\s*=>)",
                    "end": "(?=[);}\\],\\n])",
                    "patterns": [
                        {
                            "include": "#source-cfml-script-arrow-function-declaration"
                        },
                        {
                            "name": "meta.function.declaration.cfml",
                            "begin": "(?=[_$a-zA-Z][$\\w]*\\s*(=)\\s*)",
                            "end": "\\s*(=)\\s*",
                            "endCaptures": {
                                "1": {
                                    "name": "keyword.operator.assignment.cfml"
                                }
                            },
                            "patterns": [
                                {
                                    "name": "variable.other.constant.cfml entity.name.function.cfml",
                                    "match": "[A-Z][_$\\dA-Z]*"
                                },
                                {
                                    "name": "variable.other.readwrite.cfml entity.name.function.cfml",
                                    "match": "[_$a-zA-Z][$\\w]*"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "(?=\\s*\\bfunction\\b\\s+[_$a-zA-Z][$\\w]*)",
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "meta.function.body.cfml punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "name": "meta.function.body.cfml",
                            "begin": "\\{",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.block.begin.cfml"
                                }
                            },
                            "end": "(?=\\})",
                            "patterns": [
                                {
                                    "include": "#source-cfml-script-statements"
                                }
                            ]
                        },
                        {
                            "include": "#source-cfml-script-function-declaration"
                        }
                    ]
                }
            ]
        },
        "source-cfml-script-function-declaration": {
            "begin": "(?=\\s*\\bfunction\\b)",
            "end": "(?=\\{)",
            "patterns": [
                {
                    "match": "\\b(function)\\b\\s*",
                    "captures": {
                        "0": {
                            "name": "meta.function.declaration.cfml"
                        },
                        "1": {
                            "name": "storage.type.function.cfml"
                        }
                    }
                },
                {
                    "name": "meta.function.declaration.cfml entity.name.function.cfml",
                    "match": "[_$a-zA-Z][$\\w]*"
                },
                {
                    "include": "#source-cfml-script-function-declaration-parameters"
                }
            ]
        },
        "source-cfml-script-component-attributes": {
            "patterns": [
                {
                    "include": "#source-cfml-extends"
                },
                {
                    "include": "#source-cfml-script-tag-generic-attribute"
                }
            ]
        },
        "source-cfml-extends": {
            "name": "meta.class.inheritance.cfml",
            "begin": "(?i)\\b(extends|implements)\\s*(=)\\s*",
            "beginCaptures": {
              "1": {
                "name": "entity.other.attribute-name.cfml storage.modifier.$1.cfml"
              },
              "2": {
                "name": "punctuation.separator.key-value.cfml"
              }
            },
            "end": "(?<=[^\\s=])|(?=[</>{;])",
            "patterns": [
              {
                "name": "string.quoted.double.cfml",
                "begin": "\"",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                  }
                },
                "end": "(\")(?!\")",
                "endCaptures": {
                  "1": {
                    "name": "punctuation.definition.string.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "match": "[\\w$:.]+",
                    "captures": {
                      "0": {
                        "name": "entity.other.inherited-class.cfml"
                      }
                    }
                  }
                ]
              },
              {
                "name": "string.quoted.single.cfml",
                "begin": "'",
                "beginCaptures": {
                  "0": {
                    "name": "punctuation.definition.string.begin.cfml"
                  }
                },
                "end": "(')(?!')",
                "endCaptures": {
                  "1": {
                    "name": "punctuation.definition.string.end.cfml"
                  }
                },
                "patterns": [
                  {
                    "match": "[\\w$:.]+",
                    "captures": {
                      "0": {
                        "name": "entity.other.inherited-class.cfml"
                      }
                    }
                  }
                ]
              },
              {
                "match": "([\\w$:.]+)|(?=[^\\w$:.])",
                "captures": {
                  "1": {
                    "name": "string.unquoted.cfml entity.other.inherited-class.cfml"
                  }
                }
              }
            ]
          },
        "source-cfml-script-statements": {
            "patterns": [
                {
                    "include": "#source-cfml-script-conditional"
                },
                {
                    "include": "#source-cfml-script-static"
                },
                {
                    "name": "meta.block.cfml",
                    "begin": "\\{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.begin.cfml"
                        }
                    },
                    "end": "\\}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.block.end.cfml"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#source-cfml-script-statements"
                        }
                    ]
                },
                {
                    "include": "#source-cfml-script-tag-in-script"
                },
                {
                    "include": "#source-cfml-script-tag-in-script-cf"
                },
                {
                    "include": "#source-cfml-script-expressions"
                }
            ]
        }

    }
    }
