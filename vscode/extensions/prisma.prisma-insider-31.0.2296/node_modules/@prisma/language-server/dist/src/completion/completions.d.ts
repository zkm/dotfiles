import { CompletionList, Position } from 'vscode-languageserver';
import type { TextDocument } from 'vscode-languageserver-textdocument';
import { Block, BlockType } from '../util';
export declare function getSuggestionForNativeTypes(foundBlock: Block, lines: string[], wordsBeforePosition: string[], document: TextDocument, onError?: (errorMessage: string) => void): CompletionList | undefined;
/**
 * Should suggest all field attributes for a given field
 * EX: id Int |> @id, @default, @datasourceName, ...etc
 *
 * If `@datasourceName.` |> suggests nativeTypes
 * @param block
 * @param currentLine
 * @param lines
 * @param wordsBeforePosition
 * @param document
 * @returns
 */
export declare function getSuggestionForFieldAttribute(block: Block, currentLine: string, lines: string[], wordsBeforePosition: string[], document: TextDocument, onError?: (errorMessage: string) => void): CompletionList | undefined;
export declare function getSuggestionsForFieldTypes(foundBlock: Block, lines: string[], position: Position, currentLineUntrimmed: string): CompletionList;
/**
 * gets suggestions for block type
 */
export declare function getSuggestionForFirstInsideBlock(blockType: BlockType, lines: string[], position: Position, block: Block): CompletionList;
/**
 * Returns the currently available _blocks_ for completion.
 * Currently available: Generator, Datasource, Model, Enum, View
 * @param lines
 * @returns the list of block suggestions
 */
export declare function getSuggestionForBlockTypes(lines: string[]): CompletionList;
export declare function suggestEqualSymbol(blockType: BlockType): CompletionList | undefined;
export declare function getSuggestionForSupportedFields(blockType: BlockType, currentLine: string, currentLineUntrimmed: string, position: Position, lines: string[], onError?: (errorMessage: string) => void): CompletionList | undefined;
export declare function getSuggestionsForInsideRoundBrackets(untrimmedCurrentLine: string, lines: string[], position: Position, block: Block): CompletionList | undefined;
