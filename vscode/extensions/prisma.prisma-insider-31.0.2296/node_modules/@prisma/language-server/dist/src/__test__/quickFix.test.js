"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const codeActionProvider_1 = require("../codeActionProvider");
const vscode_languageserver_1 = require("vscode-languageserver");
const assert = __importStar(require("assert"));
const helper_1 = require("./helper");
function assertQuickFix(expected, fixturePath, range, diagnostics) {
    const textDocument = (0, helper_1.getTextDocument)(fixturePath);
    const params = {
        textDocument: {
            // prisma-fmt expects a URI starting with file:///, if not it will return nothing ([])
            uri: `file:///${textDocument.uri.substring(2)}`,
        },
        context: {
            diagnostics,
        },
        range,
    };
    const quickFixResult = (0, codeActionProvider_1.quickFix)(textDocument, params);
    assert.ok(quickFixResult.length !== 0, "Expected a quick fix, but didn't get one");
    assert.deepStrictEqual(quickFixResult, expected);
}
function createDiagnosticErrorUnknownType(unknownType, range) {
    return {
        message: 'Type "' + unknownType + '" is neither a built-in type, nor refers to another model, custom type, or enum.',
        severity: vscode_languageserver_1.DiagnosticSeverity.Error,
        range: range,
    };
}
suite('Quick Fixes', () => {
    suite('from TS', () => {
        const fixturePath = './codeActions/quickFixes.prisma';
        const expectedPath = `file:///${fixturePath.substring(2)}`;
        const rangeNewModel = {
            start: { line: 16, character: 9 },
            end: { line: 16, character: 17 },
        };
        const rangeNewEnum = {
            start: { line: 24, character: 6 },
            end: { line: 24, character: 13 },
        };
        const rangePorst = {
            start: { line: 31, character: 15 },
            end: { line: 31, character: 9 },
        };
        const rangeEdit = {
            start: { line: 35, character: 0 },
            end: { line: 35, character: 0 },
        };
        const diagnosticsNewModel = [createDiagnosticErrorUnknownType('NewModel', rangeNewModel)];
        const diagnosticsNewEnum = [createDiagnosticErrorUnknownType('NewEnum', rangeNewEnum)];
        const diagnosticsPorst = [createDiagnosticErrorUnknownType('Porst', rangePorst)];
        test('Model/enum creations', () => {
            assertQuickFix([
                {
                    title: "Create new model 'NewModel'",
                    kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                    diagnostics: diagnosticsNewModel,
                    edit: {
                        changes: {
                            [expectedPath]: [
                                {
                                    range: rangeEdit,
                                    newText: '\nmodel NewModel {\n\n}\n',
                                },
                            ],
                        },
                    },
                },
                {
                    title: "Create new enum 'NewModel'",
                    kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                    diagnostics: diagnosticsNewModel,
                    edit: {
                        changes: {
                            [expectedPath]: [
                                {
                                    range: rangeEdit,
                                    newText: '\nenum NewModel {\n\n}\n',
                                },
                            ],
                        },
                    },
                },
            ], fixturePath, rangeNewModel, diagnosticsNewModel),
                assertQuickFix([
                    {
                        title: "Create new model 'NewEnum'",
                        kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                        diagnostics: diagnosticsNewEnum,
                        edit: {
                            changes: {
                                [expectedPath]: [
                                    {
                                        range: rangeEdit,
                                        newText: '\nmodel NewEnum {\n\n}\n',
                                    },
                                ],
                            },
                        },
                    },
                    {
                        title: "Create new enum 'NewEnum'",
                        kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                        diagnostics: diagnosticsNewEnum,
                        edit: {
                            changes: {
                                [expectedPath]: [
                                    {
                                        range: rangeEdit,
                                        newText: '\nenum NewEnum {\n\n}\n',
                                    },
                                ],
                            },
                        },
                    },
                ], fixturePath, rangeNewEnum, diagnosticsNewEnum);
        });
        test('Spelling suggestions and model/enum creations', () => {
            assertQuickFix([
                {
                    title: "Change spelling to 'Post'",
                    kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                    diagnostics: diagnosticsPorst,
                    edit: {
                        changes: {
                            [expectedPath]: [
                                {
                                    range: rangePorst,
                                    newText: 'Post?',
                                },
                            ],
                        },
                    },
                },
                {
                    title: "Create new model 'Porst'",
                    kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                    diagnostics: diagnosticsPorst,
                    edit: {
                        changes: {
                            [expectedPath]: [
                                {
                                    range: rangeEdit,
                                    newText: '\nmodel Porst {\n\n}\n',
                                },
                            ],
                        },
                    },
                },
                {
                    title: "Create new enum 'Porst'",
                    kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                    diagnostics: diagnosticsPorst,
                    edit: {
                        changes: {
                            [expectedPath]: [
                                {
                                    range: rangeEdit,
                                    newText: '\nenum Porst {\n\n}\n',
                                },
                            ],
                        },
                    },
                },
            ], fixturePath, rangePorst, diagnosticsPorst);
        });
    });
    suite('from prisma-fmt', () => {
        const fixturePath = './codeActions/one_to_many_referenced_side_misses_unique_single_field.prisma';
        const expectedPath = `file:///${fixturePath.substring(2)}`;
        test('@relation referenced side missing @unique', () => {
            const diagnostics = [
                {
                    range: {
                        start: { line: 14, character: 2 },
                        end: { line: 15, character: 0 },
                    },
                    message: 'Error parsing attribute "@relation": The argument `references` must refer to a unique criterion in the related model. Consider adding an `@unique` attribute to the field `field` in the model `A`.',
                    severity: vscode_languageserver_1.DiagnosticSeverity.Error,
                },
            ];
            let character = 11;
            if (process.platform === 'win32') {
                character = 12;
            }
            assertQuickFix([
                {
                    title: 'Make referenced field(s) unique',
                    kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                    diagnostics: [
                        {
                            range: {
                                start: {
                                    line: 14,
                                    character: 2,
                                },
                                end: {
                                    line: 15,
                                    character: 0,
                                },
                            },
                            severity: 1,
                            message: 'Error parsing attribute "@relation": The argument `references` must refer to a unique criterion in the related model. Consider adding an `@unique` attribute to the field `field` in the model `A`.',
                        },
                    ],
                    edit: {
                        changes: {
                            [expectedPath]: [
                                {
                                    range: {
                                        start: { line: 7, character: character },
                                        end: { line: 7, character: character },
                                    },
                                    newText: ' @unique',
                                },
                            ],
                        },
                    },
                },
            ], fixturePath, {
                start: { line: 14, character: 48 },
                end: { line: 14, character: 48 },
            }, diagnostics);
        });
    });
});
//# sourceMappingURL=quickFix.test.js.map