import type { TextDocument } from 'vscode-languageserver-textdocument';
import type { CompletionList } from 'vscode-languageserver';
import { CompletionItem, CompletionItemKind, Position } from 'vscode-languageserver';
import type { PreviewFeatures } from '../previewFeatures';
import { Block, BlockType } from '../util';
export declare const corePrimitiveTypes: CompletionItem[];
export declare const allowedBlockTypes: CompletionItem[];
export declare const relationModeValues: CompletionItem[];
export declare const supportedGeneratorFields: CompletionItem[];
export declare function givenBlockAttributeParams({ blockAttribute, wordBeforePosition, datasourceProvider, previewFeatures, }: {
    blockAttribute: '@@unique' | '@@id' | '@@index' | '@@fulltext';
    wordBeforePosition: string;
    datasourceProvider: string | undefined;
    previewFeatures: PreviewFeatures[] | undefined;
}): CompletionItem[];
export declare const blockAttributes: CompletionItem[];
export declare const sortValuesCompletionItems: CompletionItem[];
export declare const sqlServerClusteredValuesCompletionItems: CompletionItem[];
export declare function givenFieldAttributeParams(fieldAttribute: '@unique' | '@id', previewFeatures: PreviewFeatures[] | undefined, datasourceProvider: string | undefined, wordBeforePosition: string): CompletionItem[];
export declare function filterSortLengthBasedOnInput(attribute: '@@unique' | '@unique' | '@@id' | '@id' | '@@index', previewFeatures: PreviewFeatures[] | undefined, datasourceProvider: string | undefined, wordBeforePosition: string, items: CompletionItem[]): CompletionItem[];
export declare const fieldAttributes: CompletionItem[];
export declare const sortLengthProperties: CompletionItem[];
export declare const relationArguments: CompletionItem[];
export declare const dataSourceProviders: CompletionItem[];
export declare const dataSourceProviderArguments: CompletionItem[];
export declare const generatorProviders: CompletionItem[];
export declare const generatorProviderArguments: CompletionItem[];
export declare const engineTypes: CompletionItem[];
export declare const engineTypeArguments: CompletionItem[];
export declare const previewFeaturesArguments: CompletionItem[];
export declare function toCompletionItems(allowedTypes: string[], kind: CompletionItemKind): CompletionItem[];
/**
 * Removes all block attribute suggestions that are invalid in this context.
 * E.g. `@@id()` when already used should not be in the suggestions.
 */
export declare function filterSuggestionsForBlock(suggestions: CompletionItem[], block: Block, lines: string[]): CompletionItem[];
/**
 * Removes all line attribute suggestions that are invalid in this context.
 * E.g. `@map()` when already used should not be in the suggestions.
 */
export declare function filterSuggestionsForLine(suggestions: CompletionItem[], currentLine: string, fieldType: string, fieldBlockType?: BlockType): CompletionItem[];
/**
 * Removes all field suggestion that are invalid in this context. E.g. fields that are used already in a block will not be suggested again.
 * This function removes all field suggestion that are invalid in a certain context. E.g. in a generator block `provider, output, platforms, pinnedPlatForm`
 * are possible fields. But those fields are only valid suggestions if they haven't been used in this block yet. So in case `provider` has already been used, only
 * `output, platforms, pinnedPlatform` will be suggested.
 */
export declare function removeInvalidFieldSuggestions(supportedFields: string[], block: Block, lines: string[], position: Position): string[];
export declare function handlePreviewFeatures(previewFeaturesArray: string[], position: Position, currentLineUntrimmed: string, isInsideQuotation: boolean): CompletionList;
export declare function getNativeTypes(document: TextDocument, prismaType: string, onError?: (errorMessage: string) => void): CompletionItem[];
