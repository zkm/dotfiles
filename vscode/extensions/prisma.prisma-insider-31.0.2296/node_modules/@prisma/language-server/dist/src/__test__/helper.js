"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findCursorPosition = exports.getTextDocument = exports.CURSOR_CHARACTER = void 0;
const fs = __importStar(require("fs"));
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const path_1 = __importDefault(require("path"));
exports.CURSOR_CHARACTER = '|';
function getTextDocument(testFilePath) {
    const content = fs.readFileSync(path_1.default.join(__dirname, '../../../test/fixtures', testFilePath), 'utf8');
    return vscode_languageserver_textdocument_1.TextDocument.create(testFilePath, 'prisma', 1, content);
}
exports.getTextDocument = getTextDocument;
const findCursorPosition = (input) => {
    const lines = input.split('\n');
    let foundCursorCharacter = -1;
    const foundLinePosition = lines.findIndex((line) => {
        const cursorPosition = line.indexOf(exports.CURSOR_CHARACTER);
        if (cursorPosition !== -1) {
            foundCursorCharacter = cursorPosition;
            return true;
        }
    });
    if (foundLinePosition >= 0 && foundCursorCharacter >= 0) {
        return { line: foundLinePosition, character: foundCursorCharacter };
    }
    throw new Error('Each test must include the `|` pipe character to signal where the cursor should be when executing the test.');
};
exports.findCursorPosition = findCursorPosition;
//# sourceMappingURL=helper.js.map