import type { TextDocument } from 'vscode-languageserver-textdocument';
import { Position, Range } from 'vscode-languageserver';
import { PreviewFeatures } from './previewFeatures';
export type BlockType = 'generator' | 'datasource' | 'model' | 'type' | 'enum' | 'view';
export declare class Block {
    type: BlockType;
    range: Range;
    nameRange: Range;
    name: string;
    constructor(type: BlockType, range: Range, nameRange: Range, name: string);
}
export declare function fullDocumentRange(document: TextDocument): Range;
export declare function getCurrentLine(document: TextDocument, line: number): string;
export declare function convertDocumentTextToTrimmedLineArray(document: TextDocument): string[];
export declare function isFirstInsideBlock(position: Position, currentLine: string): boolean;
export declare function getWordAtPosition(document: TextDocument, position: Position): string;
export declare function getBlocks(lines: string[]): Generator<Block, void, void>;
export declare function getBlockAtPosition(line: number, lines: string[]): Block | void;
export declare function getModelOrTypeOrEnumOrViewBlock(blockName: string, lines: string[]): Block | void;
export declare function getExperimentalFeaturesRange(document: TextDocument): Range | undefined;
export declare function getValuesInsideSquareBrackets(line: string): string[];
export declare function declaredNativeTypes(document: TextDocument, onError?: (errorMessage: string) => void): boolean;
export declare function extractFirstWord(line: string): string;
export declare function extractBlockName(line: string): string;
export declare function getAllRelationNames(lines: string[]): string[];
export declare function getAllTypeNames(lines: string[]): string[];
export declare function isInsideFieldArgument(currentLineUntrimmed: string, position: Position): boolean;
/***
 * @param symbols expects e.g. '()', '[]' or '""'
 */
export declare function isInsideAttribute(currentLineUntrimmed: string, position: Position, symbols: string): boolean;
/***
 * Checks if inside e.g. "here"
 * Does not check for escaped quotation marks.
 */
export declare function isInsideQuotationMark(currentLineUntrimmed: string, position: Position): boolean;
export declare function isInsideGivenProperty(currentLineUntrimmed: string, wordsBeforePosition: string[], attributeName: string, position: Position): boolean;
export declare function getFieldType(line: string): string | undefined;
export declare function getSymbolBeforePosition(document: TextDocument, position: Position): string;
export declare function positionIsAfterFieldAndType(position: Position, document: TextDocument, wordsBeforePosition: string[]): boolean;
export declare function getFirstDatasourceName(lines: string[]): string | undefined;
export declare function getFirstDatasourceProvider(lines: string[]): string | undefined;
export declare function getAllPreviewFeaturesFromGenerators(lines: string[]): PreviewFeatures[] | undefined;
export declare function getFieldsFromCurrentBlock(lines: string[], block: Block, position?: Position): string[];
export declare function getFieldTypesFromCurrentBlock(lines: string[], block: Block, position?: Position): {
    fieldTypes: Map<string, {
        lineIndexes: number[];
        fieldName: string | undefined;
    }>;
    fieldTypeNames: Record<string, string>;
};
export declare function getCompositeTypeFieldsRecursively(lines: string[], compositeTypeFieldNames: string[], fieldTypesFromBlock: {
    fieldTypes: Map<string, {
        lineIndexes: number[];
        fieldName: string | undefined;
    }>;
    fieldTypeNames: Record<string, string>;
}): string[];
export declare const MAX_SAFE_VALUE_i32 = 2147483647;
