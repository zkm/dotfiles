"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const MessageHandler_1 = require("../MessageHandler");
const helper_1 = require("./helper");
const assert = __importStar(require("assert"));
suite('Artificial Panics', () => {
    const OLD_ENV = Object.assign({}, process.env);
    test('code actions', () => {
        const fixturePath = './artificial-panic/schema.prisma';
        const document = (0, helper_1.getTextDocument)(fixturePath);
        const params = {
            textDocument: document,
            range: {
                start: { line: 0, character: 0 },
                end: { line: 0, character: 0 },
            },
            context: {
                diagnostics: [
                    {
                        range: {
                            start: { line: 0, character: 0 },
                            end: { line: 0, character: 0 },
                        },
                        message: 'dx msg',
                    },
                ],
            },
        };
        process.env.FORCE_PANIC_PRISMA_FMT = '1';
        let calledCount = 0;
        let calledArg = undefined;
        // No official mock implementation in mocha
        // -> DIY mock for onError
        const onError = (arg) => {
            calledCount += 1;
            calledArg = arg;
        };
        try {
            const _codeActions = (0, MessageHandler_1.handleCodeActions)(params, document, onError);
            assert.fail("This shouldn't happen!");
        }
        catch (e) {
            assert.ok(calledArg);
            assert.strictEqual(calledCount, 1);
        }
        finally {
            process.env = Object.assign({}, OLD_ENV);
        }
    });
    test('formatter', () => {
        const fixturePath = './artificial-panic/schema.prisma';
        const document = (0, helper_1.getTextDocument)(fixturePath);
        const params = {
            textDocument: document,
            options: {
                tabSize: 2,
                insertSpaces: true,
            },
        };
        process.env.FORCE_PANIC_PRISMA_FMT = '1';
        let calledCount = 0;
        let calledArg = undefined;
        const onError = (arg) => {
            calledCount += 1;
            calledArg = arg;
        };
        try {
            const _formatResult = (0, MessageHandler_1.handleDocumentFormatting)(params, document, onError);
            assert.fail("This shouldn't happen!");
        }
        catch (e) {
            assert.ok(calledArg);
            assert.strictEqual(calledCount, 1);
        }
        finally {
            process.env = Object.assign({}, OLD_ENV);
        }
    });
    test('linting', () => {
        const fixturePath = './artificial-panic/schema.prisma';
        const document = (0, helper_1.getTextDocument)(fixturePath);
        process.env.FORCE_PANIC_PRISMA_FMT = '1';
        let calledCount = 0;
        let calledArg = undefined;
        const onError = (arg) => {
            calledCount += 1;
            calledArg = arg;
        };
        try {
            const _diagnostics = (0, MessageHandler_1.handleDiagnosticsRequest)(document, onError);
            assert.fail("This shouldn't happen!");
        }
        catch (e) {
            assert.ok(calledArg);
            assert.strictEqual(calledCount, 1);
        }
        finally {
            process.env = Object.assign({}, OLD_ENV);
        }
    });
    test('preview features', () => {
        const fixturePath = './artificial-panic/schema.prisma';
        let document = (0, helper_1.getTextDocument)(fixturePath);
        const schema = document.getText();
        const position = (0, helper_1.findCursorPosition)(schema);
        document = vscode_languageserver_textdocument_1.TextDocument.create('./artificial-panic/schema.prisma', 'prisma', 1, schema.replace(helper_1.CURSOR_CHARACTER, ''));
        const params = {
            textDocument: document,
            position,
        };
        process.env.FORCE_PANIC_PRISMA_FMT_LOCAL = '1';
        let calledCount = 0;
        let calledArg = undefined;
        const onError = (arg) => {
            calledCount += 1;
            calledArg = arg;
        };
        try {
            const _completions = (0, MessageHandler_1.handleCompletionRequest)(params, document, onError);
            assert.fail("This shouldn't happen!");
        }
        catch (e) {
            assert.ok(calledArg);
            assert.strictEqual(calledCount, 1);
        }
        finally {
            process.env = Object.assign({}, OLD_ENV);
        }
    });
    test('native types', () => {
        const fixturePath = './artificial-panic/native-types.prisma';
        let document = (0, helper_1.getTextDocument)(fixturePath);
        const schema = document.getText();
        const position = (0, helper_1.findCursorPosition)(schema);
        document = vscode_languageserver_textdocument_1.TextDocument.create('./artificial-panic/native-types.prisma', 'prisma', 1, schema.replace(helper_1.CURSOR_CHARACTER, ''));
        const params = {
            textDocument: document,
            position,
        };
        process.env.FORCE_PANIC_PRISMA_FMT_LOCAL = '1';
        let calledCount = 0;
        let calledArg = undefined;
        const onError = (arg) => {
            calledCount += 1;
            calledArg = arg;
        };
        try {
            const _completions = (0, MessageHandler_1.handleCompletionRequest)(params, document, onError);
            assert.fail("This shouldn't happen!");
        }
        catch (e) {
            assert.ok(calledArg);
            assert.strictEqual(calledCount, 1);
        }
        finally {
            process.env = Object.assign({}, OLD_ENV);
        }
    });
    test('completions', () => {
        const fixturePath = './artificial-panic/schema.prisma';
        const document = (0, helper_1.getTextDocument)(fixturePath);
        const params = {
            textDocument: document,
            position: { character: 0, line: 0 },
        };
        process.env.FORCE_PANIC_PRISMA_FMT = '1';
        let calledCount = 0;
        let calledArg = undefined;
        const onError = (arg) => {
            calledCount += 1;
            calledArg = arg;
        };
        try {
            const _completions = (0, MessageHandler_1.handleCompletionRequest)(params, document, onError);
            assert.fail("This shouldn't happen!");
        }
        catch (e) {
            assert.ok(calledArg);
            assert.strictEqual(calledCount, 1);
        }
        finally {
            process.env = Object.assign({}, OLD_ENV);
        }
    });
});
//# sourceMappingURL=artificial-panic.test.js.map