"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const MessageHandler_1 = require("../MessageHandler");
const assert = __importStar(require("assert"));
const helper_1 = require("./helper");
function assertJumpToDefinition(position, expectedRange, fixturePath) {
    const textDocument = (0, helper_1.getTextDocument)(fixturePath);
    const params = { textDocument, position };
    const defResult = (0, MessageHandler_1.handleDefinitionRequest)(textDocument, params);
    assert.ok(defResult !== undefined);
    assert.deepStrictEqual(defResult[0].targetRange, expectedRange);
}
suite('Jump-to-Definition', () => {
    const fixturePathSqlite = './correct_sqlite.prisma';
    const fixturePathMongodb = './correct_mongodb.prisma';
    test('SQLite: from attribute to model', () => {
        assertJumpToDefinition({
            line: 11,
            character: 16,
        }, {
            start: {
                line: 26,
                character: 0,
            },
            end: {
                line: 31,
                character: 1,
            },
        }, fixturePathSqlite);
        assertJumpToDefinition({
            line: 14,
            character: 14,
        }, {
            start: {
                line: 18,
                character: 0,
            },
            end: {
                line: 24,
                character: 1,
            },
        }, fixturePathSqlite);
        assertJumpToDefinition({
            line: 22,
            character: 9,
        }, {
            start: {
                line: 9,
                character: 0,
            },
            end: {
                line: 16,
                character: 1,
            },
        }, fixturePathSqlite);
    });
    test('MongoDB: from attribute to type', () => {
        assertJumpToDefinition({
            line: 12,
            character: 11,
        }, {
            start: {
                line: 15,
                character: 0,
            },
            end: {
                line: 19,
                character: 1,
            },
        }, fixturePathMongodb);
    });
});
//# sourceMappingURL=jumpToDefinition.test.js.map